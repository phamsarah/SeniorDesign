{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Firebase from 'firebase';\nimport { Client, Event, Venue } from \"./objects\";\nimport { toMonthString, objectToArray } from \"./util\";\nimport _ from \"lodash\";\n\nrequire(\"firebase/functions\");\n\nvar Database = function () {\n  function Database() {\n    var _this = this;\n\n    _classCallCheck(this, Database);\n\n    this.db = Firebase.database();\n    this.func = Firebase.functions();\n    this.clientDB = this.db.ref(\"database/clients\");\n    this.eventDB = this.db.ref(\"database/events\");\n    this.venueDB = this.db.ref(\"database/venues\");\n    this.footballGamesDB = this.db.ref(\"database/footballGames\");\n    this.venueDB.on('value', function (snapshot) {\n      var _venues = snapshot.val();\n\n      var venueList = [];\n\n      for (var venueID in _venues) {\n        if (_venues.hasOwnProperty(venueID)) {\n          var venueObj = new Venue(_venues[venueID], venueID);\n          venueList.push(venueObj);\n        }\n      }\n\n      _this.venues = _.sortBy(venueList, \"name\");\n    });\n    this.clientDB.on('value', function (snapshot) {\n      var _clients = snapshot.val();\n\n      var clientList = [];\n\n      for (var clientID in _clients) {\n        if (_clients.hasOwnProperty(clientID)) {\n          var clientObj = new Client(_clients[clientID], clientID);\n          clientList.push(clientObj);\n        }\n      }\n\n      _this.clients = _.sortBy(clientList, \"stageName\");\n    });\n    this.eventDB.on('value', function (snapshot) {\n      var _events = snapshot.val();\n\n      var eventList = [];\n\n      for (var eventID in _events) {\n        if (_events.hasOwnProperty(eventID)) {\n          var eventObj = new Event(_events[eventID], eventID);\n          eventList.push(eventObj);\n        }\n      }\n\n      _this.events = _.sortBy(eventList, \"date\");\n    });\n    this.footballGamesDB.on('value', function (snapshot) {\n      _this.footballGames = {\n        auburn: [],\n        alabama: []\n      };\n      _this.games = snapshot.val();\n\n      for (var year in _this.games) {\n        for (var month in _this.games[year]) {\n          for (var day in _this.games[year][month]) {\n            if (_this.games[year][month][day].auburn) {\n              _this.footballGames.auburn.push(_this.games[year][month][day].auburn);\n            }\n\n            if (_this.games[year][month][day].alabama) {\n              _this.footballGames.alabama.push(_this.games[year][month][day].alabama);\n            }\n          }\n        }\n      }\n    });\n    this.getHolidays().then(function (holidays) {\n      return _this.holidays = holidays;\n    }).catch(function (err) {\n      console.log(\"[!] Error getting holidays: \");\n      console.log(err);\n    });\n    this.generateSendSaveOne = this.func.httpsCallable(\"generateSendSaveOne\");\n    this.generateSendSaveAll = this.func.httpsCallable(\"generateSendSaveAll\");\n  }\n\n  _createClass(Database, [{\n    key: \"getClients\",\n    value: function getClients() {\n      var _this2 = this;\n\n      return new Promise(function (res, rej) {\n        _this2.clientDB.once(\"value\").then(function (data) {\n          var _clients = data.val();\n\n          var foundClients = [];\n\n          for (var clientID in _clients) {\n            if (_clients.hasOwnProperty(clientID)) {\n              var clientObj = new Client(_clients[clientID], clientID);\n              foundClients.push(clientObj);\n            }\n          }\n\n          var sortedClients = _.sortBy(foundClients, \"stageName\");\n\n          res(sortedClients);\n        }).catch(function (err) {\n          return rej(err);\n        });\n      });\n    }\n  }, {\n    key: \"getCurrentMonthAndUpcomingEvents\",\n    value: function getCurrentMonthAndUpcomingEvents(options) {\n      if (!options) {\n        options = Date.now();\n      }\n\n      var archiveDate = new Date(options);\n      var currentMonth = toMonthString(archiveDate);\n      return new Promise(function (res, rej) {\n        Firebase.database().ref('database/events').orderByChild('month').startAt(currentMonth).once(\"value\").then(function (data) {\n          var _events = data.val();\n\n          var foundEvents = [];\n\n          for (var eventID in _events) {\n            if (_events.hasOwnProperty(eventID)) {\n              var eventObj = new Event(_events[eventID], eventID);\n              foundEvents.push(eventObj);\n            }\n          }\n\n          res(foundEvents);\n        }).catch(function (err) {\n          return rej(err);\n        });\n      });\n    }\n  }, {\n    key: \"getMonthEvents\",\n    value: function getMonthEvents(options) {\n      if (!options) {\n        options = Date.now();\n      }\n\n      var archiveDate = new Date(options);\n      var archiveMonth = toMonthString(archiveDate);\n      return new Promise(function (res, rej) {\n        Firebase.database().ref('database/events').orderByChild('month').equalTo(archiveMonth).once(\"value\").then(function (data) {\n          var _events = data.val();\n\n          var foundEvents = [];\n\n          for (var eventID in _events) {\n            if (_events.hasOwnProperty(eventID)) {\n              var eventObj = new Event(_events[eventID], eventID);\n              foundEvents.push(eventObj);\n            }\n          }\n\n          res(foundEvents);\n        }).catch(function (err) {\n          return rej(err);\n        });\n      });\n    }\n  }, {\n    key: \"getVenues\",\n    value: function getVenues() {\n      var _this3 = this;\n\n      return new Promise(function (res, rej) {\n        _this3.venueDB.once(\"value\").then(function (data) {\n          var _venues = data.val();\n\n          var venueList = [];\n\n          for (var venueID in _venues) {\n            if (_venues.hasOwnProperty(venueID)) {\n              var venueObj = new Venue(_venues[venueID], venueID);\n              venueList.push(venueObj);\n            }\n          }\n\n          var sortedVenues = _.sortBy(venueList, \"name\");\n\n          res(sortedVenues);\n        }).catch(function (err) {\n          return rej(err);\n        });\n      });\n    }\n  }, {\n    key: \"addClient\",\n    value: function addClient(_client) {\n      var _this4 = this;\n\n      return new Promise(function (res, rej) {\n        var clientRef = _this4.clientDB.push(_client.toData());\n\n        _client.id = clientRef.key;\n        res();\n      });\n    }\n  }, {\n    key: \"updateClient\",\n    value: function updateClient(_client) {\n      var clientRef = this.clientDB.child(_client.id);\n      return clientRef.update(_client.toData());\n    }\n  }, {\n    key: \"removeClient\",\n    value: function removeClient(client) {\n      var _this5 = this;\n\n      var thisClientsEvents = this.events.filter(function (event) {\n        return event.clientID === client.id;\n      });\n      thisClientsEvents.forEach(function (event) {\n        event.clientName = client.stageName;\n\n        _this5.updateEvent(event);\n      });\n      return this.clientDB.child(client.id).remove();\n    }\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(_event) {\n      var _this6 = this;\n\n      return new Promise(function (res, rej) {\n        var eventRef = _this6.eventDB.push(_event.toData());\n\n        _event.id = eventRef.key;\n        res();\n      });\n    }\n  }, {\n    key: \"updateEvent\",\n    value: function updateEvent(_event) {\n      var eventRef = this.eventDB.child(_event.id);\n      return eventRef.update(_event.toData());\n    }\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent(_event) {\n      var eventRef = this.eventDB.child(_event.id);\n      return eventRef.remove();\n    }\n  }, {\n    key: \"addVenue\",\n    value: function addVenue(_venue) {\n      var _this7 = this;\n\n      return new Promise(function (res, rej) {\n        var venueRef = _this7.venueDB.push(_venue.toData());\n\n        _venue.id = venueRef.key;\n        res(_venue);\n      });\n    }\n  }, {\n    key: \"updateVenue\",\n    value: function updateVenue(_venue) {\n      var venueRef = this.venueDB.child(_venue.id);\n      return venueRef.update(_venue.toData());\n    }\n  }, {\n    key: \"removeVenue\",\n    value: function removeVenue(venue) {\n      var _this8 = this;\n\n      var thisVenuesEvents = this.events.filter(function (event) {\n        return event.venueID === venue.id;\n      });\n      thisVenuesEvents.forEach(function (event) {\n        _this8.eventDB.child(event.id).remove();\n      });\n      return this.venueDB.child(venue.id).remove();\n    }\n  }, {\n    key: \"sendForms\",\n    value: function sendForms(venue, date) {\n      var _this9 = this;\n\n      return new Promise(function (res, rej) {\n        _this9.sendAllForms({\n          venue: venue.id,\n          month: date.getMonth() + 1,\n          year: date.getFullYear()\n        }).then(function (response) {\n          if (response.error) {\n            rej(response.error);\n          } else {\n            res();\n          }\n        }).catch(function (err) {\n          return rej(err.message);\n        });\n      });\n    }\n  }, {\n    key: \"generateDocument\",\n    value: function generateDocument(data) {\n      var _this10 = this;\n\n      return new Promise(function (res, rej) {\n        _this10.sendForm(data).then(function (response) {\n          if (response.error) {\n            rej(response.error);\n          } else {\n            res();\n          }\n        }).catch(function (err) {\n          return rej(err.message);\n        });\n      });\n    }\n  }, {\n    key: \"getHolidays\",\n    value: function getHolidays() {\n      return new Promise(function (res, rej) {\n        try {\n          var Holidays = require('date-holidays');\n\n          var hd = new Holidays();\n          hd.init('US');\n          var holidays = [];\n          years = [new Date(new Date().setFullYear(new Date().getFullYear() - 1)).getFullYear(), new Date().getFullYear(), new Date(new Date().setFullYear(new Date().getFullYear() + 1)).getFullYear()];\n          years.forEach(function (year) {\n            hd.getHolidays(year).filter(function (holiday) {\n              return holiday.type === \"public\";\n            }).forEach(function (holiday) {\n              return holidays.push(holiday);\n            });\n          });\n          res(holidays);\n        } catch (e) {\n          rej(e);\n        }\n      });\n    }\n  }]);\n\n  return Database;\n}();\n\nexport { Database as default };","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/Database.js"],"names":["Firebase","Client","Event","Venue","toMonthString","objectToArray","_","require","Database","db","database","func","functions","clientDB","ref","eventDB","venueDB","footballGamesDB","on","snapshot","_venues","val","venueList","venueID","hasOwnProperty","venueObj","push","venues","sortBy","_clients","clientList","clientID","clientObj","clients","_events","eventList","eventID","eventObj","events","footballGames","auburn","alabama","games","year","month","day","getHolidays","then","holidays","catch","err","console","log","generateSendSaveOne","httpsCallable","generateSendSaveAll","Promise","res","rej","once","data","foundClients","sortedClients","options","Date","now","archiveDate","currentMonth","orderByChild","startAt","foundEvents","archiveMonth","equalTo","sortedVenues","_client","clientRef","toData","id","key","child","update","client","thisClientsEvents","filter","event","forEach","clientName","stageName","updateEvent","remove","_event","eventRef","_venue","venueRef","venue","thisVenuesEvents","date","sendAllForms","getMonth","getFullYear","response","error","message","sendForm","Holidays","hd","init","years","setFullYear","holiday","type","e"],"mappings":"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","sourcesContent":["import Firebase from 'firebase';\r\nimport { Client, Event, Venue } from \"./objects\";\r\nimport {toMonthString, objectToArray} from \"./util\";\r\nimport _ from \"lodash\";\r\nrequire(\"firebase/functions\");\r\n\r\nexport default class Database {\r\n    constructor() {\r\n        this.db = Firebase.database();\r\n        this.func = Firebase.functions();\r\n\r\n        this.clientDB = this.db.ref(\"database/clients\");\r\n        this.eventDB = this.db.ref(\"database/events\");\r\n        this.venueDB = this.db.ref(\"database/venues\");\r\n        this.footballGamesDB = this.db.ref(\"database/footballGames\");\r\n\r\n        /*\r\n         * Set Firebase listener on database/venues\r\n         * If anything changes in the database/venues tree,\r\n         * update this.venues\r\n         * AKA, this.venues holds the most recent venues\r\n         */\r\n        this.venueDB.on('value', snapshot => {\r\n            var _venues = snapshot.val();\r\n            let venueList = [];\r\n            for (let venueID in _venues) {\r\n                if (_venues.hasOwnProperty(venueID)) {\r\n                    let venueObj = new Venue(_venues[venueID], venueID);\r\n                    venueList.push(venueObj);\r\n                }\r\n            }\r\n            this.venues = _.sortBy(venueList, \"name\");\r\n        });\r\n        \r\n        /* Set firebase listener on database/clients\r\n         * If anything changes in the database/clients tree,\r\n         * update this.clients\r\n         * AKA, this.clients holds the most recently-updated clients\r\n         */\r\n        this.clientDB.on('value', snapshot => {\r\n            let _clients = snapshot.val();\r\n            let clientList = [];\r\n            for (let clientID in _clients) {\r\n                if (_clients.hasOwnProperty(clientID)) {\r\n                    let clientObj = new Client(_clients[clientID], clientID);\r\n                    clientList.push(clientObj);\r\n                }\r\n            }\r\n            this.clients = _.sortBy(clientList, \"stageName\");\r\n        });\r\n\r\n        /* Set firebase listener on database/events\r\n         * If anything changes in the database/events tree,\r\n         * update this.events\r\n         * AKA, this.events holds the most recently-updated events\r\n         */\r\n        this.eventDB.on('value', snapshot => {\r\n            let _events = snapshot.val();\r\n            let eventList = [];\r\n            for (let eventID in _events) {\r\n                if (_events.hasOwnProperty(eventID)) {\r\n                    let eventObj = new Event(_events[eventID], eventID);\r\n                    eventList.push(eventObj);\r\n                }\r\n            }\r\n            this.events = _.sortBy(eventList, \"date\");\r\n        });\r\n\r\n        /*\r\n         * Set Firebase listener on database/footballGames\r\n         * If anything changes in the database/footballGames tree,\r\n         * update this.footballGames\r\n         * AKA, this.venues holds the most recent venues\r\n         */\r\n        this.footballGamesDB.on('value', snapshot => {\r\n            this.footballGames = {\r\n                auburn: [],\r\n                alabama: []\r\n            };\r\n            this.games = snapshot.val();\r\n            for (let year in this.games) {\r\n                for (let month in this.games[year]) {\r\n                    for (let day in this.games[year][month]) {\r\n                        if (this.games[year][month][day].auburn) {\r\n                            this.footballGames.auburn.push(this.games[year][month][day].auburn);\r\n                        }\r\n                        if (this.games[year][month][day].alabama) {\r\n                            this.footballGames.alabama.push(this.games[year][month][day].alabama);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.getHolidays()\r\n        .then(holidays => this.holidays = holidays)\r\n        .catch(err => {\r\n            console.log(\"[!] Error getting holidays: \");\r\n            console.log(err);\r\n        });\r\n\r\n        this.generateSendSaveOne = this.func.httpsCallable(\"generateSendSaveOne\");\r\n        this.generateSendSaveAll = this.func.httpsCallable(\"generateSendSaveAll\");\r\n    }\r\n\r\n    // load information on all clients\r\n    getClients() {\r\n        return new Promise((res, rej) => {\r\n            this.clientDB.once(\"value\").then(data => {\r\n                let _clients = data.val();\r\n                let foundClients = [];\r\n\r\n                for (let clientID in _clients) {\r\n                    if (_clients.hasOwnProperty(clientID)) {\r\n                        let clientObj = new Client(_clients[clientID], clientID);\r\n                        foundClients.push(clientObj);\r\n                    }\r\n                }\r\n\r\n                let sortedClients = _.sortBy(foundClients,\"stageName\");\r\n                res(sortedClients);\r\n            }).catch(err => rej(err));\r\n        });\r\n    }\r\n\r\n    // Load all events for the current month and onwards.\r\n    // Assumption: Limited, since events should not be scheduled more than a few months in advance.\r\n    getCurrentMonthAndUpcomingEvents(options) {\r\n        if (!options) {\r\n            options = Date.now();\r\n        }\r\n\r\n        let archiveDate = new Date(options);\r\n\r\n        let currentMonth = toMonthString(archiveDate);\r\n\r\n        return new Promise((res, rej) => {\r\n            Firebase.database().ref('database/events').orderByChild('month').startAt(currentMonth).once(\"value\").then(data => {\r\n                let _events = data.val();\r\n                let foundEvents = [];\r\n                for (let eventID in _events) {\r\n                    if (_events.hasOwnProperty(eventID)) {\r\n                        let eventObj = new Event(_events[eventID], eventID);\r\n                        foundEvents.push(eventObj);\r\n                    }\r\n                }\r\n                res(foundEvents);\r\n            }).catch(err => rej(err));\r\n        });\r\n    }\r\n\r\n    // Load all of the events for a given month.\r\n    getMonthEvents(options) {\r\n        if (!options) {\r\n            options = Date.now();\r\n        }\r\n\r\n        let archiveDate = new Date(options);\r\n\r\n        let archiveMonth = toMonthString(archiveDate);\r\n\r\n        return new Promise((res, rej) => {\r\n            Firebase.database().ref('database/events').orderByChild('month').equalTo(archiveMonth).once(\"value\").then(data => {\r\n                let _events = data.val();\r\n                let foundEvents = [];\r\n                for (let eventID in _events) {\r\n                    if (_events.hasOwnProperty(eventID)) {\r\n                        let eventObj = new Event(_events[eventID], eventID);\r\n                        foundEvents.push(eventObj);\r\n                    }\r\n                }\r\n                res(foundEvents);\r\n            }).catch(err => rej(err));\r\n        });\r\n    }\r\n\r\n    getVenues() {\r\n        return new Promise((res, rej) => {\r\n            this.venueDB.once(\"value\").then(data => {\r\n                let _venues = data.val();\r\n                let venueList = [];\r\n\r\n                for (let venueID in _venues) {\r\n                    if (_venues.hasOwnProperty(venueID)) {\r\n                        let venueObj = new Venue(_venues[venueID], venueID);\r\n                        venueList.push(venueObj);\r\n                    }\r\n                }\r\n\r\n                let sortedVenues = _.sortBy(venueList, \"name\");\r\n                res(sortedVenues);\r\n            }).catch(err => rej(err));\r\n        });\r\n    }\r\n\r\n    addClient(_client) {\r\n        return new Promise((res, rej) => {\r\n           let clientRef = this.clientDB.push(_client.toData());\r\n           _client.id = clientRef.key;\r\n           res();\r\n        });\r\n    }\r\n\r\n    updateClient(_client) {\r\n       let clientRef = this.clientDB.child(_client.id);\r\n       return clientRef.update(_client.toData());\r\n    }\r\n\r\n    /*\r\n     * Removes a Client by its ID from the Client tree of the database. Any events displayed\r\n     * with this client will still exist in the calendar.\r\n     */\r\n    removeClient(client) {\r\n        let thisClientsEvents = this.events.filter(event => event.clientID === client.id);\r\n        thisClientsEvents.forEach(event => {\r\n            event.clientName = client.stageName;\r\n            this.updateEvent(event);\r\n        }); \r\n        return this.clientDB.child(client.id).remove();\r\n    }\r\n\r\n    addEvent(_event) {\r\n        return new Promise((res, rej) => {\r\n            let eventRef = this.eventDB.push(_event.toData());\r\n            _event.id = eventRef.key;\r\n            res()\r\n        });\r\n    }\r\n\r\n    updateEvent(_event) {\r\n        let eventRef = this.eventDB.child(_event.id);\r\n        return eventRef.update(_event.toData());\r\n    }\r\n\r\n    removeEvent(_event) {\r\n        let eventRef = this.eventDB.child(_event.id);\r\n        return eventRef.remove();\r\n    }\r\n\r\n    addVenue(_venue) {\r\n        return new Promise((res, rej) => {\r\n            let venueRef = this.venueDB.push(_venue.toData());\r\n            _venue.id = venueRef.key;\r\n            res(_venue);\r\n        });\r\n    }\r\n\r\n    updateVenue(_venue) {\r\n        let venueRef = this.venueDB.child(_venue.id);\r\n        return venueRef.update(_venue.toData());\r\n    }\r\n\r\n    /*\r\n     * Removes a Venue by its ID from the Venue tree of the database. Also\r\n     * removes any Events at this Venue from the Event tree of the database. \r\n     */\r\n    removeVenue(venue) {\r\n        let thisVenuesEvents = this.events.filter(event => event.venueID === venue.id);\r\n        thisVenuesEvents.forEach(event => {\r\n                this.eventDB.child(event.id).remove();\r\n        });\r\n        return this.venueDB.child(venue.id).remove();\r\n    }\r\n\r\n    sendForms(venue, date) {\r\n        return new Promise((res, rej) => {\r\n            this.sendAllForms({\r\n                venue: venue.id,\r\n                month: date.getMonth() + 1,\r\n                year: date.getFullYear()\r\n            }).then(response => {\r\n                if (response.error) {\r\n                    rej(response.error);\r\n                } else {\r\n                    res();\r\n                }\r\n            }).catch(err => rej(err.message));\r\n        });\r\n    }\r\n\r\n    generateDocument(data) {\r\n        return new Promise((res, rej) => {\r\n            this.sendForm(data).then(response => {\r\n                if (response.error) {\r\n                    rej(response.error);\r\n                } else {\r\n                    res();\r\n                }\r\n            }).catch(err => rej(err.message));\r\n        });\r\n    }\r\n\r\n    getHolidays() {\r\n        return new Promise((res, rej) => {\r\n            try {\r\n                let Holidays = require('date-holidays');\r\n                let hd = new Holidays();\r\n                hd.init('US');\r\n                let holidays = [];\r\n                years = [\r\n                    new Date(new Date().setFullYear(new Date().getFullYear() - 1)).getFullYear(),\r\n                    new Date().getFullYear(),\r\n                    new Date(new Date().setFullYear(new Date().getFullYear() + 1)).getFullYear()\r\n                ];\r\n                years.forEach(year => {\r\n                    hd.getHolidays(year)\r\n                    .filter(holiday => holiday.type === \"public\")\r\n                    .forEach(holiday => holidays.push(holiday));\r\n                });\r\n                res(holidays);\r\n            }\r\n            catch (e) {\r\n                rej(e);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}