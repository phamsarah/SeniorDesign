{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { toTimeString, toDateString, toDateTime, dayInMS, toMonthString } from \"./util\";\nexport var Client = function () {\n  function Client(_data, _id) {\n    _classCallCheck(this, Client);\n\n    if (!_id) _id = null;\n    if (!_data) _data = {};\n    this.id = _id;\n    this.performers = _data.performers;\n    this.stageName = _data.stage;\n    this.email = _data.email;\n    this.splitCheck = _data.splitCheck;\n    this.bio = _data.bio || \"\";\n  }\n\n  _createClass(Client, [{\n    key: \"update\",\n    value: function update(data) {\n      this.performers = data.performers || this.performers;\n      this.stageName = data.stageName || this.stageName;\n      this.email = data.email || this.email;\n      this.splitCheck = data.splitCheck || false;\n      this.bio = data.bio || this.bio;\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      return {\n        performers: this.performers || [],\n        stage: this.stageName || \"\",\n        email: this.email || \"\",\n        splitCheck: this.splitCheck || false,\n        bio: this.bio || \"\"\n      };\n    }\n  }]);\n\n  return Client;\n}();\nexport var Event = function () {\n  function Event(_data, _id) {\n    _classCallCheck(this, Event);\n\n    if (!_id) _id = null;\n    if (!_data) _data = {\n      price: 0.00,\n      date: toDateString(new Date()),\n      month: toMonthString(new Date())\n    };\n    this.id = _id;\n    this.clientID = _data.client;\n    this.clientName = _data.clientName;\n    this.venueID = _data.venue;\n    this.price = parseFloat(_data.price || 0);\n    this.confirmationLastSent = _data.confirmationLastSent || \"\";\n    this.invoiceLastSent = _data.invoiceLastSent || \"\";\n    this.start = toDateTime({\n      date: _data.date,\n      time: _data.start\n    });\n    this.end = toDateTime({\n      date: _data.date,\n      time: _data.end\n    });\n\n    if (this.end < this.start) {\n      this.end.setTime(this.end.getTime() + dayInMS);\n    }\n  }\n\n  _createClass(Event, [{\n    key: \"update\",\n    value: function update(data) {\n      if (!data) return;\n      this.clientID = data.clientID || this.clientID;\n      this.clientName = data.clientName || this.clientName;\n      this.venueID = data.venueID || this.venueID;\n      this.price = parseFloat(data.price || this.price);\n      this.confirmationLastSent = data.confirmationLastSent || this.confirmationLastSent;\n      this.invoiceLastSent = data.invoiceLastSent || this.invoiceLastSent;\n      if (data.start) this.start = data.start;\n      if (data.end) this.end = data.end;\n\n      if (data.date) {\n        this.month = toMonthString(toDateTime(data.date));\n        var splits = data.date.split(\"-\");\n        this.start.setFullYear(splits[0], splits[1] - 1, splits[2]);\n        this.end.setFullYear(splits[0], splits[1] - 1, splits[2]);\n      }\n\n      if (data.startTime) {\n        var _splits = data.startTime.split(\":\");\n\n        this.start.setHours(_splits[0], _splits[1]);\n      }\n\n      if (data.endTime) {\n        var _splits2 = data.endTime.split(\":\");\n\n        this.end.setHours(_splits2[0], _splits2[1]);\n      }\n\n      if (this.end < this.start) {\n        this.end.setDate(this.end.getDate() + 1);\n      }\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      return {\n        date: toDateString(this.start),\n        month: toMonthString(this.start),\n        start: toTimeString(this.start),\n        end: toTimeString(this.end),\n        client: this.clientID || \"\",\n        clientName: this.clientName || \"\",\n        venue: this.venueID || \"\",\n        price: this.price || 0,\n        confirmationLastSent: this.confirmationLastSent || \"\",\n        invoiceLastSent: this.invoiceLastSent || \"\"\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this.id === other.id && this.clientID === other.clientID && this.venueID === other.venueID && this.start.getTime() === other.start.getTime() && this.end.getTime() === other.start.getTime();\n    }\n  }]);\n\n  return Event;\n}();\nexport var Venue = function () {\n  function Venue(_data, _id) {\n    _classCallCheck(this, Venue);\n\n    if (!_data) _data = {};\n    this.id = _id || null;\n    this.name = _data.name || \"\";\n    this.contactEmail = _data.email || \"\";\n    this.address = _data.address || {\n      street1: _data.street1 || \"\",\n      street2: _data.street2 || \"\",\n      city: _data.city || \"\",\n      state: _data.state || \"\",\n      zip: _data.zip || \"\"\n    };\n    this.presetTimeSlots = _data.presetTimeSlots || [];\n    this.artistConfirmationSendOut = _data.artistConfirmationSendOut || 1;\n    this.artistInvoiceSendOut = _data.artistInvoiceSendOut || 1;\n    this.monthlyBookingListSendOut = _data.monthlyBookingListSendOut || 1;\n    this.monthlyCalendarSendOut = _data.monthlyCalendarSendOut || 1;\n    this.allConfirmationsLastSent = _data.allConfirmationsLastSent || \"\";\n    this.allInvoicesLastSent = _data.allInvoicesLastSent || \"\";\n    this.bookingListLastSent = _data.bookingListLastSent || \"\";\n    this.calendarLastSent = _data.calendarLastSent || \"\";\n    this.emaillist = _data.emaillist || [];\n  }\n\n  _createClass(Venue, [{\n    key: \"update\",\n    value: function update(data) {\n      this.name = data.name || this.name;\n      this.contactEmail = data.email || this.contactEmail;\n      this.address = {\n        street1: data.street1 || this.address.street1,\n        street2: data.street2 || this.address.street2,\n        city: data.city || this.address.city,\n        state: data.state || this.address.state,\n        zip: (data.zip || this.address.zip).toString()\n      };\n      this.presetTimeSlots = data.presetTimeSlots || this.presetTimeSlots;\n      this.artistConfirmationSendOut = data.artistConfirmationSendOut || this.artistConfirmationSendOut;\n      this.artistInvoiceSendOut = data.artistInvoiceSendOut || this.artistInvoiceSendOut;\n      this.monthlyBookingListSendOut = data.monthlyBookingListSendOut || this.monthlyBookingListSendOut;\n      this.monthlyCalendarSendOut = data.monthlyCalendarSendOut || this.monthlyCalendarSendOut;\n      this.allConfirmationsLastSent = data.allConfirmationsLastSent || this.allConfirmationsLastSent;\n      this.allInvoicesLastSent = data.allInvoicesLastSent || this.allInvoicesLastSent;\n      this.bookingListLastSent = data.bookingListLastSent || this.bookingListLastSent;\n      this.calendarLastSent = data.calendarLastSent || this.calendarLastSent;\n      this.emaillist = data.emaillist || this.emaillist;\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      return {\n        name: this.name,\n        email: this.contactEmail,\n        address: this.address,\n        presetTimeSlots: this.presetTimeSlots || [],\n        artistConfirmationSendOut: this.artistConfirmationSendOut || 1,\n        artistInvoiceSendOut: this.artistInvoiceSendOut || 1,\n        monthlyBookingListSendOut: this.monthlyBookingListSendOut || 1,\n        monthlyCalendarSendOut: this.monthlyCalendarSendOut || 1,\n        allConfirmationsLastSent: this.allConfirmationsLastSent || \"\",\n        allInvoicesLastSent: this.allInvoicesLastSent || \"\",\n        bookingListLastSent: this.bookingListLastSent || \"\",\n        calendarLastSent: this.calendarLastSent || \"\",\n        emaillist: this.emaillist || []\n      };\n    }\n  }]);\n\n  return Venue;\n}();","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/objects.js"],"names":["toTimeString","toDateString","toDateTime","dayInMS","toMonthString","Client","_data","_id","id","performers","stageName","stage","email","splitCheck","bio","data","Event","price","date","Date","month","clientID","client","clientName","venueID","venue","parseFloat","confirmationLastSent","invoiceLastSent","start","time","end","setTime","getTime","splits","split","setFullYear","startTime","setHours","endTime","setDate","getDate","other","Venue","name","contactEmail","address","street1","street2","city","state","zip","presetTimeSlots","artistConfirmationSendOut","artistInvoiceSendOut","monthlyBookingListSendOut","monthlyCalendarSendOut","allConfirmationsLastSent","allInvoicesLastSent","bookingListLastSent","calendarLastSent","emaillist","toString"],"mappings":"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","sourcesContent":["import {toTimeString, toDateString, toDateTime, dayInMS, toMonthString} from \"./util\";\r\n\r\n/*\r\n * id: an ID object that identifies this instance of Client\r\n * performers: an array of strings that represent the names of the performers\r\n * stageName: a string representing the stage name of the client\r\n * email: a string representing the email address of the client\r\n * splitCheck: a boolean representing whether to do split checks (what does this mean? who knows)\r\n * bio: a string representing the bio of the client\r\n */\r\nexport class Client {\r\n    constructor(_data, _id) {\r\n        if (!_id) _id = null;\r\n        if (!_data) _data = {};\r\n        this.id = _id;\r\n\r\n        this.performers = _data.performers;\r\n        this.stageName = _data.stage;\r\n        this.email = _data.email;\r\n        this.splitCheck = _data.splitCheck;\r\n        this.bio = _data.bio || \"\";\r\n    }\r\n\r\n    update(data) {\r\n        this.performers = data.performers || this.performers;\r\n        this.stageName = data.stageName || this.stageName;\r\n        this.email = data.email || this.email;\r\n        this.splitCheck = data.splitCheck || false;\r\n        this.bio = data.bio || this.bio;\r\n    }\r\n\r\n    toData() {\r\n        return {\r\n            performers: this.performers || [],\r\n            stage: this.stageName || \"\",\r\n            email: this.email || \"\",\r\n            splitCheck: this.splitCheck || false,\r\n            bio: this.bio || \"\"\r\n        };\r\n    }\r\n}\r\n\r\n/*\r\n * id: an ID object that identifies this instance of Venue\r\n * date: a Date object representing the date of the event (posted to database as string \"YYYY-MM-DD\")\r\n * month: a Date object representing the date of the event (posted to database as string \"YYYY-MM\")\r\n * start: a Date object representing the start time of the event (posted to database as string \"HH-mm\")\r\n * end: a Date object representing the end time  of the event (posted to database as string \"HH-mm\")\r\n * client: an ID object representing the identifer of the client booked for the venue\r\n * clientName: a string representing the stage name of the event's client. This string is only set when the \r\n *  client is deleted so the calendar can still show the event with the proper client, even though the client\r\n *  no long exists in the database. \r\n * venue: an ID object representing the identifier of the venue that event will take place at\r\n * price: a floating point representing the amount of money the musician will be paid\r\n */\r\nexport class Event {\r\n    constructor(_data, _id) {\r\n        if (!_id) _id = null;\r\n        if (!_data) _data = {\r\n            price: 0.00,\r\n            date: toDateString(new Date()),\r\n            month: toMonthString(new Date())\r\n        };\r\n\r\n        this.id = _id;\r\n        this.clientID = _data.client;\r\n        this.clientName = _data.clientName;\r\n        this.venueID = _data.venue;\r\n        this.price = parseFloat(_data.price || 0);\r\n        this.confirmationLastSent = _data.confirmationLastSent || \"\";\r\n        this.invoiceLastSent = _data.invoiceLastSent || \"\";\r\n\r\n        this.start = toDateTime({\r\n            date: _data.date,\r\n            time: _data.start\r\n        });\r\n\r\n        this.end = toDateTime({\r\n            date: _data.date,\r\n            time: _data.end\r\n        });\r\n\r\n        if (this.end < this.start) {\r\n            this.end.setTime(this.end.getTime() + dayInMS);\r\n        }\r\n    }\r\n\r\n    update(data) {\r\n        if (!data) return;\r\n        this.clientID = data.clientID || this.clientID;\r\n        this.clientName = data.clientName || this.clientName;\r\n        this.venueID = data.venueID || this.venueID;\r\n        this.price = parseFloat(data.price || this.price);\r\n        this.confirmationLastSent = data.confirmationLastSent || this.confirmationLastSent;\r\n        this.invoiceLastSent = data.invoiceLastSent || this.invoiceLastSent;\r\n\r\n        if (data.start) this.start = data.start;\r\n        if (data.end) this.end = data.end;\r\n\r\n        if (data.date) {\r\n            this.month = toMonthString(toDateTime(data.date));\r\n            let splits = data.date.split(\"-\");\r\n            this.start.setFullYear(splits[0], splits[1] -1, splits[2]);\r\n            this.end.setFullYear(splits[0], splits[1] - 1, splits[2]);\r\n        }\r\n        if (data.startTime) {\r\n            let splits = data.startTime.split(\":\");\r\n            this.start.setHours(splits[0], splits[1]);\r\n        }\r\n        if (data.endTime) {\r\n            let splits = data.endTime.split(\":\");\r\n            this.end.setHours(splits[0], splits[1]);\r\n        }\r\n\r\n        if (this.end < this.start) {\r\n            this.end.setDate(this.end.getDate() + 1);\r\n        }\r\n    }\r\n\r\n    toData() {\r\n        return {\r\n            date: toDateString(this.start),   // YYYY-MM-DD\r\n            month: toMonthString(this.start), // YYYY-MM\r\n            start: toTimeString(this.start),  // HH:mm\r\n            end: toTimeString(this.end),      // HH:mm\r\n            client: this.clientID || \"\",\r\n            clientName: this.clientName || \"\",\r\n            venue: this.venueID || \"\",\r\n            price: this.price || 0,\r\n            confirmationLastSent: this.confirmationLastSent || \"\",\r\n            invoiceLastSent: this.invoiceLastSent || \"\"\r\n        };\r\n    }\r\n\r\n    isEqual(other) {\r\n        return this.id === other.id &&\r\n               this.clientID === other.clientID &&\r\n               this.venueID === other.venueID &&\r\n               this.start.getTime() === other.start.getTime() &&\r\n               this.end.getTime() === other.start.getTime();\r\n    }\r\n}\r\n\r\n/*\r\n * id: an ID object that identifies this instance of Venue\r\n * name: string representing the name of the venue\r\n * contactEmail: string representing the email address of the venue\r\n * address: object with the following fields:\r\n *    street1: string\r\n *    street2: string\r\n *    city: string\r\n *    state: string (2-letter notation, i.e. AL)\r\n *    zip: string (5 character notation, i.e. 36830)\r\n * presetTimeSlots: array of objects with the following fields:\r\n *    start: string representing the start time of the preset time slot (HH-mm notation)\r\n *    end: string representing the end time of the preset time slot (HH-mm notation)\r\n * artistConfirmationSendOut:\r\n *    day: integer representing the day of the month of the send out (must be <= 28)\r\n * artistInvoiceSendOut:\r\n *    day: integer representing the day of the month of the send out (must be <= 28)\r\n * monthlyBookingListSendOut:\r\n *    day: integer representing the day of the month of the send out (must be <= 28)\r\n */\r\nexport class Venue {\r\n    constructor(_data, _id) {\r\n        if (!_data) _data = {};\r\n        this.id = _id || null;\r\n        this.name = _data.name || \"\";\r\n        this.contactEmail = _data.email || \"\";\r\n        this.address = _data.address || {\r\n            street1: _data.street1 || \"\",\r\n            street2: _data.street2 || \"\",\r\n            city: _data.city || \"\",\r\n            state: _data.state || \"\",\r\n            zip: _data.zip || \"\"\r\n        };\r\n        this.presetTimeSlots = _data.presetTimeSlots || [];\r\n        this.artistConfirmationSendOut = _data.artistConfirmationSendOut || 1;\r\n        this.artistInvoiceSendOut = _data.artistInvoiceSendOut || 1;\r\n        this.monthlyBookingListSendOut = _data.monthlyBookingListSendOut || 1;\r\n        this.monthlyCalendarSendOut = _data.monthlyCalendarSendOut || 1;\r\n        this.allConfirmationsLastSent = _data.allConfirmationsLastSent || \"\";\r\n        this.allInvoicesLastSent = _data.allInvoicesLastSent || \"\";\r\n        this.bookingListLastSent = _data.bookingListLastSent || \"\";\r\n        this.calendarLastSent = _data.calendarLastSent || \"\";\r\n        this.emaillist = _data.emaillist || []; \r\n    }\r\n\r\n    update(data) {\r\n        this.name = data.name || this.name;\r\n        this.contactEmail = data.email || this.contactEmail;\r\n\r\n        this.address = {\r\n            street1: data.street1 || this.address.street1,\r\n            street2: data.street2 || this.address.street2,\r\n            city: data.city || this.address.city,\r\n            state: data.state || this.address.state,\r\n            zip: (data.zip || this.address.zip).toString()\r\n        };\r\n        this.presetTimeSlots = data.presetTimeSlots || this.presetTimeSlots;\r\n        this.artistConfirmationSendOut = data.artistConfirmationSendOut || this.artistConfirmationSendOut;\r\n        this.artistInvoiceSendOut = data.artistInvoiceSendOut || this.artistInvoiceSendOut;\r\n        this.monthlyBookingListSendOut = data.monthlyBookingListSendOut || this.monthlyBookingListSendOut;\r\n        this.monthlyCalendarSendOut = data.monthlyCalendarSendOut || this.monthlyCalendarSendOut;\r\n\r\n        this.allConfirmationsLastSent = data.allConfirmationsLastSent || this.allConfirmationsLastSent;\r\n        this.allInvoicesLastSent = data.allInvoicesLastSent || this.allInvoicesLastSent;\r\n        this.bookingListLastSent = data.bookingListLastSent || this.bookingListLastSent;\r\n        this.calendarLastSent = data.calendarLastSent || this.calendarLastSent;\r\n        this.emaillist = data.emaillist || this.emaillist;\r\n    }\r\n\r\n    toData() {\r\n        return {\r\n            name: this.name,\r\n            email: this.contactEmail,\r\n            address: this.address,\r\n            presetTimeSlots: this.presetTimeSlots || [],\r\n            artistConfirmationSendOut: this.artistConfirmationSendOut || 1,\r\n            artistInvoiceSendOut: this.artistInvoiceSendOut || 1,\r\n            monthlyBookingListSendOut: this.monthlyBookingListSendOut || 1,\r\n            monthlyCalendarSendOut: this.monthlyCalendarSendOut || 1,\r\n            allConfirmationsLastSent: this.allConfirmationsLastSent || \"\",\r\n            allInvoicesLastSent: this.allInvoicesLastSent || \"\",\r\n            bookingListLastSent: this.bookingListLastSent || \"\",\r\n            calendarLastSent: this.calendarLastSent || \"\",\r\n            emaillist: this.emaillist || [] \r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}