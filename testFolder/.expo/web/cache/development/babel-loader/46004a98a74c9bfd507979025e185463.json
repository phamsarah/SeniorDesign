{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/dennis/Desktop/music-matters-bookings-system-working/App.js\";\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport DayView from \"./views/DayView\";\nimport EventView from \"./views/EventView\";\nimport MonthView from \"./views/MonthView\";\nimport { ManageVenues, VenueView } from \"./views/VenueViews\";\nimport { VenueView2 } from \"./views/VenueViews2\";\nimport { ClientView, ManageClients } from \"./views/ClientViews\";\nimport Database from \"./Database\";\nimport Styles from \"./styles\";\nimport { createAppContainer, createStackNavigator, createSwitchNavigator } from 'react-navigation';\nimport { CalendarList } from 'react-native-calendars';\nimport { randomColor, toDateString, toDateTime, toMonthString } from \"./util\";\nimport _ from 'lodash';\nimport LoginView from \"./views/LoginView\";\nimport { withMappedNavigationProps } from 'react-navigation-props-mapper';\nimport Dropdown from \"./components/Dropdown\";\nimport AppContainer from \"./components/AppContainer\";\nimport MoreButton from \"./components/MoreButton\";\nimport { Client, Event, Venue } from \"./objects\";\nimport DocumentationView from \"./views/DocumentationView\";\nYellowBox.ignoreWarnings(['Setting a timer']);\nvar loadedData = {\n  clients: null,\n  events: null,\n  venues: null,\n  viewedMonths: null\n};\nvar db = null;\nvar LoadingScreen = (_dec = withMappedNavigationProps(), _dec(_class = function (_React$Component) {\n  _inherits(LoadingScreen, _React$Component);\n\n  function LoadingScreen() {\n    _classCallCheck(this, LoadingScreen);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LoadingScreen).apply(this, arguments));\n  }\n\n  _createClass(LoadingScreen, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this = this;\n\n      db = new Database();\n      Promise.all([db.getClients(), db.getCurrentMonthAndUpcomingEvents(), db.getVenues()]).then(function (values) {\n        _this.props.navigation.navigate('VenueManage', {\n          database: db\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AppContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        }\n      }));\n    }\n  }]);\n\n  return LoadingScreen;\n}(React.Component)) || _class);\nvar AppStack = createStackNavigator({\n  Month: MonthView,\n  Day: DayView,\n  Event: EventView,\n  Venue: VenueView,\n  Venue2: VenueView2,\n  VenueManage: ManageVenues,\n  Client: ClientView,\n  ClientManage: ManageClients,\n  Documentation: DocumentationView\n}, {\n  initialRouteName: 'VenueManage',\n  headerMode: 'none',\n  cardOverlayEnabled: true\n});\nexport default createAppContainer(createSwitchNavigator({\n  Login: LoginView,\n  Loading: LoadingScreen,\n  App: AppStack\n}, {\n  initialRouteName: 'Login',\n  headerMode: 'none'\n}));","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/App.js"],"names":["React","DayView","EventView","MonthView","ManageVenues","VenueView","VenueView2","ClientView","ManageClients","Database","Styles","createAppContainer","createStackNavigator","createSwitchNavigator","CalendarList","randomColor","toDateString","toDateTime","toMonthString","_","LoginView","withMappedNavigationProps","Dropdown","AppContainer","MoreButton","Client","Event","Venue","DocumentationView","YellowBox","ignoreWarnings","loadedData","clients","events","venues","viewedMonths","db","LoadingScreen","Promise","all","getClients","getCurrentMonthAndUpcomingEvents","getVenues","then","values","props","navigation","navigate","database","catch","err","console","log","Component","AppStack","Month","Day","Venue2","VenueManage","ClientManage","Documentation","initialRouteName","headerMode","cardOverlayEnabled","Login","Loading","App"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAQA,OAAOC,OAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,SAASC,YAAT,EAAuBC,SAAvB;AACA,SAASC,UAAT;AACA,SAASC,UAAT,EAAqBC,aAArB;AACA,OAAOC,QAAP;AACA,OAAOC,MAAP;AACA,SACEC,kBADF,EAEEC,oBAFF,EAGEC,qBAHF,QAIO,kBAJP;AAKA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgDC,aAAhD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAOC,QAAP;AACA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB;AACA,OAAOC,iBAAP;AAKAC,SAAS,CAACC,cAAV,CAAyB,CAAC,iBAAD,CAAzB;AAGA,IAAIC,UAAU,GAAG;AACfC,EAAAA,OAAO,EAAE,IADM;AAEfC,EAAAA,MAAM,EAAE,IAFO;AAGfC,EAAAA,MAAM,EAAE,IAHO;AAIfC,EAAAA,YAAY,EAAE;AAJC,CAAjB;AAOA,IAAIC,EAAE,GAAG,IAAT;IAGMC,a,WADLhB,yBAAyB,E;;;;;;;;;;;yCAEH;AAAA;;AACnBe,MAAAA,EAAE,GAAG,IAAI3B,QAAJ,EAAL;AAEA6B,MAAAA,OAAO,CAACC,GAAR,CAAY,CACVH,EAAE,CAACI,UAAH,EADU,EAEVJ,EAAE,CAACK,gCAAH,EAFU,EAGVL,EAAE,CAACM,SAAH,EAHU,CAAZ,EAKGC,IALH,CAKQ,UAACC,MAAD,EAAY;AAChB,QAAA,KAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,aAA/B,EAA8C;AAC5CC,UAAAA,QAAQ,EAAEZ;AADkC,SAA9C;AAGD,OATH,EAUGa,KAVH,CAUS,UAACC,GAAD;AAAA,eAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,OAVT;AAWD;;;6BAEQ;AACP,aACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EAvByBlD,KAAK,CAACqD,S;AA0BlC,IAAMC,QAAQ,GAAG1C,oBAAoB,CACnC;AACE2C,EAAAA,KAAK,EAAEpD,SADT;AAEEqD,EAAAA,GAAG,EAAEvD,OAFP;AAGEyB,EAAAA,KAAK,EAAExB,SAHT;AAIEyB,EAAAA,KAAK,EAAEtB,SAJT;AAKEoD,EAAAA,MAAM,EAAEnD,UALV;AAMEoD,EAAAA,WAAW,EAAEtD,YANf;AAOEqB,EAAAA,MAAM,EAAElB,UAPV;AAQEoD,EAAAA,YAAY,EAAEnD,aARhB;AASEoD,EAAAA,aAAa,EAAEhC;AATjB,CADmC,EAYnC;AACEiC,EAAAA,gBAAgB,EAAE,aADpB;AAEEC,EAAAA,UAAU,EAAE,MAFd;AAGEC,EAAAA,kBAAkB,EAAE;AAHtB,CAZmC,CAArC;AAmBA,eAAepD,kBAAkB,CAC/BE,qBAAqB,CACnB;AACEmD,EAAAA,KAAK,EAAE5C,SADT;AAEE6C,EAAAA,OAAO,EAAE5B,aAFX;AAGE6B,EAAAA,GAAG,EAAEZ;AAHP,CADmB,EAMnB;AACEO,EAAAA,gBAAgB,EAAE,OADpB;AAEEC,EAAAA,UAAU,EAAE;AAFd,CANmB,CADU,CAAjC","sourcesContent":["import React from 'react';\r\nimport {\r\n  ActivityIndicator,\r\n  Button,\r\n  View,\r\n  YellowBox,\r\n  Alert,\r\n} from 'react-native';\r\nimport DayView from './views/DayView';\r\nimport EventView from './views/EventView';\r\nimport MonthView from './views/MonthView';\r\nimport { ManageVenues, VenueView } from './views/VenueViews';\r\nimport { VenueView2 } from './views/VenueViews2';\r\nimport { ClientView, ManageClients } from './views/ClientViews';\r\nimport Database from './Database';\r\nimport Styles from './styles';\r\nimport {\r\n  createAppContainer,\r\n  createStackNavigator,\r\n  createSwitchNavigator,\r\n} from 'react-navigation';\r\nimport { CalendarList } from 'react-native-calendars';\r\nimport { randomColor, toDateString, toDateTime, toMonthString } from './util';\r\nimport _ from 'lodash';\r\nimport LoginView from './views/LoginView';\r\nimport { withMappedNavigationProps } from 'react-navigation-props-mapper';\r\nimport Dropdown from './components/Dropdown';\r\nimport AppContainer from './components/AppContainer';\r\nimport MoreButton from './components/MoreButton';\r\nimport { Client, Event, Venue } from './objects';\r\nimport DocumentationView from './views/DocumentationView';\r\n\r\n// Firebase's implementation utilizes long timers,\r\n// which React Native doesn't like and throws a warning,\r\n// so this is here to ignore that.\r\nYellowBox.ignoreWarnings(['Setting a timer']);\r\n\r\n//stores all clients/events/venues loaded from the database, to prevent unnecessary db calls\r\nlet loadedData = {\r\n  clients: null,\r\n  events: null,\r\n  venues: null,\r\n  viewedMonths: null,\r\n};\r\n\r\nlet db = null;\r\n\r\n@withMappedNavigationProps()\r\nclass LoadingScreen extends React.Component {\r\n  componentWillMount() {\r\n    db = new Database();\r\n\r\n    Promise.all([\r\n      db.getClients(),\r\n      db.getCurrentMonthAndUpcomingEvents(),\r\n      db.getVenues(),\r\n    ])\r\n      .then((values) => {\r\n        this.props.navigation.navigate('VenueManage', {\r\n          database: db,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AppContainer>\r\n        <ActivityIndicator size='large' />\r\n      </AppContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppStack = createStackNavigator(\r\n  {\r\n    Month: MonthView,\r\n    Day: DayView,\r\n    Event: EventView,\r\n    Venue: VenueView,\r\n    Venue2: VenueView2,\r\n    VenueManage: ManageVenues,\r\n    Client: ClientView,\r\n    ClientManage: ManageClients,\r\n    Documentation: DocumentationView,\r\n  },\r\n  {\r\n    initialRouteName: 'VenueManage',\r\n    headerMode: 'none',\r\n    cardOverlayEnabled: true,\r\n  }\r\n);\r\n\r\nexport default createAppContainer(\r\n  createSwitchNavigator(\r\n    {\r\n      Login: LoginView,\r\n      Loading: LoadingScreen,\r\n      App: AppStack,\r\n    },\r\n    {\r\n      initialRouteName: 'Login',\r\n      headerMode: 'none',\r\n    }\r\n  )\r\n);\r\n"]},"metadata":{},"sourceType":"module"}