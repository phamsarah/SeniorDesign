{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec,\n    _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dennis/Desktop/music-matters-bookings-system-working/views/DocumentationView.js\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Event, Venue } from \"../objects\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { RadioGroup } from 'react-native-btr';\nimport DateTimePicker from 'react-native-modal-datetime-picker/src/index';\nimport Styles from \"../styles\";\nimport { toAMPM, toDateString, toDateTime, toMilitaryTime, toTimeString, toUS } from \"../util\";\nimport Database from \"../Database\";\nimport { withMappedNavigationProps } from 'react-navigation-props-mapper';\nimport Dropdown from \"../components/Dropdown\";\nimport TimeInput from \"../components/TimeInput\";\nimport AppContainer from \"../components/AppContainer\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nvar DocumentationView = (_dec = withMappedNavigationProps(), _dec(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(DocumentationView, _React$Component);\n\n  function DocumentationView(props) {\n    var _this;\n\n    _classCallCheck(this, DocumentationView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentationView).call(this, props));\n    _this.state = {\n      from: '',\n      disableSendingConfirmation: false,\n      disableSendingInvoice: false,\n      disableSendingBookingList: false,\n      disableSendingCalendar: false,\n      disableSendingAllConfirmations: false,\n      disableSendingAllInvoices: false,\n      banners: {\n        confirmations: '',\n        invoices: '',\n        bookinglist: '',\n        calendar: ''\n      },\n      display: {\n        confirmation: '',\n        invoice: '',\n        bookinglist: '',\n        calendar: '',\n        allConfirmations: '',\n        allInvoices: ''\n      },\n      sendOutDays: {\n        confirmations: '',\n        invoices: '',\n        bookinglist: '',\n        calendar: '',\n        allConfirmations: '',\n        allInvoices: ''\n      },\n      months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n    var date = new Date();\n    var day = date.getDate();\n    _this.state.yearOfThisMonth = _this.props.date.getFullYear();\n    _this.state.thisMonth = _this.props.date.getMonth();\n    date.setMonth(_this.props.date.getMonth() + 1);\n    _this.state.nextMonth = date.getMonth();\n    _this.state.yearOfNextMonth = date.getFullYear();\n    date = new Date();\n    date.setMonth(_this.props.date.getMonth() - 1);\n    _this.state.lastMonth = date.getMonth();\n    _this.state.yearofLastMonth = date.getFullYear();\n    _this.state.sendOutDays.confirmations = new Date(_this.state.yearofLastMonth, _this.state.lastMonth, parseInt(_this.props.venue.artistConfirmationSendOut));\n    _this.state.sendOutDays.invoices = new Date(_this.state.yearofLastMonth, _this.state.lastMonth, _this.props.venue.artistInvoiceSendOut);\n    _this.state.sendOutDays.bookinglist = new Date(_this.state.yearofLastMonth, _this.state.lastMonth, _this.props.venue.monthlyBookingListSendOut);\n    _this.state.sendOutDays.calendar = new Date(_this.state.yearofLastMonth, _this.state.lastMonth, _this.props.venue.monthlyCalendarSendOut);\n    _this.state.banners.confirmations = _this.state.months[_this.state.thisMonth] + ' ' + _this.state.yearOfThisMonth + \"'s Confirmations\";\n    _this.state.banners.invoices = _this.state.months[_this.state.thisMonth] + ' ' + _this.state.yearOfThisMonth + \"'s Invoices\";\n    _this.state.banners.bookinglist = _this.state.months[_this.state.thisMonth] + ' ' + _this.state.yearOfThisMonth + \"'s Booking List\";\n    _this.state.banners.calendar = _this.state.months[_this.state.thisMonth] + ' ' + _this.state.yearOfThisMonth + \"'s Calendar\";\n\n    if (_this.props.event) {\n      _this.state.from = 'EventView';\n      _this.state.display.confirmation = _this.generateArtistConfirmationDisplay();\n      _this.state.display.invoice = _this.generateArtistInvoiceDisplay();\n      _this.state.display.allConfirmations = React.createElement(View, {\n        style: Styles.hide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        }\n      });\n      _this.state.display.allInvoices = React.createElement(View, {\n        style: Styles.hide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        }\n      });\n    } else {\n        _this.state.from = 'MonthView';\n        _this.state.display.confirmation = React.createElement(View, {\n          style: Styles.hide,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          }\n        });\n        _this.state.display.invoice = React.createElement(View, {\n          style: Styles.hide,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          }\n        });\n        _this.state.display.allConfirmations = _this.generateAllConfirmationsDisplay();\n        _this.state.display.allInvoices = _this.generateAllInvoicesDisplay();\n      }\n\n    _this.state.display.bookinglist = _this.generateBookingListDisplay();\n    _this.state.display.calendar = _this.generateCalendarDisplay();\n    return _this;\n  }\n\n  _createClass(DocumentationView, [{\n    key: \"generateArtistConfirmationDisplay\",\n    value: function generateArtistConfirmationDisplay() {\n      var _this2 = this;\n\n      var date = new Date();\n      var event = this.props.database.events.find(function (event) {\n        return event.id === _this2.props.event.id;\n      });\n\n      if (event.confirmationLastSent && date < this.state.sendOutDays.confirmations) {\n        return React.createElement(Text, {\n          style: DocumentationStyles.entryInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistConfirmationSendOut + ', ' + this.state.yearofLastMonth);\n      } else if (event.confirmationLastSent && date < this.state.sendOutDays.confirmations) {\n          var lastSentDate = new Date(event.confirmationLastSent);\n          return React.createElement(View, {\n            style: DocumentationStyles.entryInfo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            }\n          }, React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistConfirmationSendOut + ', ' + this.state.yearofLastMonth), \");\");\n        } else {\n            var _lastSentDate = new Date(event.confirmationLastSent);\n\n            return React.createElement(Text, {\n              style: DocumentationStyles.entryInfo,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 229\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate.getMonth()] + ' ' + _lastSentDate.getDate() + ', ' + _lastSentDate.getFullYear());\n          }\n    }\n  }, {\n    key: \"generateArtistInvoiceDisplay\",\n    value: function generateArtistInvoiceDisplay() {\n      var _this3 = this;\n\n      var date = new Date();\n      var event = this.props.database.events.find(function (event) {\n        return event.id === _this3.props.event.id;\n      });\n\n      if (event.invoiceLastSent && date < this.state.sendOutDays.invoices) {\n        return React.createElement(View, {\n          style: DocumentationStyles.entryInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistInvoiceSendOut + ', ' + this.state.yearofLastMonth));\n      } else if (event.invoiceLastSent && date < this.state.sendOutDays.invoices) {\n          var lastSentDate = new Date(event.invoiceLastSent);\n          return React.createElement(View, {\n            style: DocumentationStyles.entryInfo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            }\n          }, React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistInvoiceSendOut + ', ' + this.state.yearofLastMonth));\n        } else {\n            var _lastSentDate2 = new Date(event.invoiceLastSent);\n\n            return React.createElement(View, {\n              style: DocumentationStyles.entryInfo,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 302\n              }\n            }, React.createElement(Text, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 303\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate2.getMonth()] + ' ' + _lastSentDate2.getDate() + ', ' + _lastSentDate2.getFullYear()), React.createElement(Text, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 311\n              }\n            }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistInvoiceSendOut + ', ' + this.state.yearofLastMonth));\n          }\n    }\n  }, {\n    key: \"generateAllConfirmationsDisplay\",\n    value: function generateAllConfirmationsDisplay() {\n      var _this4 = this;\n\n      var date = new Date();\n      var venue = this.props.database.venues.find(function (venue) {\n        return venue.id === _this4.props.venue.id;\n      });\n\n      if (venue.allConfirmationsLastSent && date < this.state.sendOutDays.confirmations) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          }\n        }, React.createElement(Text, {\n          style: DocumentationStyles.setFontSizeMini,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistConfirmationSendOut + ', ' + this.state.yearofLastMonth));\n      } else if (venue.allConfirmationsLastSent && date < this.state.sendOutDays.confirmations) {\n          var lastSentDate = new Date(venue.allConfirmationsLastSent);\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 358\n            }\n          }, React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 359\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 367\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistConfirmationSendOut + ', ' + this.state.yearofLastMonth));\n        } else {\n            var _lastSentDate3 = new Date(venue.allConfirmationsLastSent);\n\n            return React.createElement(View, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 383\n              }\n            }, React.createElement(Text, {\n              style: DocumentationStyles.setFontSizeMini,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 384\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate3.getMonth()] + ' ' + _lastSentDate3.getDate() + ', ' + _lastSentDate3.getFullYear()));\n          }\n    }\n  }, {\n    key: \"generateAllInvoicesDisplay\",\n    value: function generateAllInvoicesDisplay() {\n      var _this5 = this;\n\n      var date = new Date();\n      var venue = this.props.database.venues.find(function (venue) {\n        return venue.id === _this5.props.venue.id;\n      });\n\n      if (venue.allInvoicesLastSent && date < this.state.sendOutDays.invoices) {\n        return React.createElement(View, {\n          style: DocumentationStyles.entryInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 409\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistInvoiceSendOut + ', ' + this.state.yearofLastMonth));\n      } else if (venue.allInvoicesLastSent && date < this.state.sendOutDays.invoices) {\n          var lastSentDate = new Date(venue.allInvoicesLastSent);\n          return React.createElement(View, {\n            style: DocumentationStyles.entryInfo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 428\n            }\n          }, React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 429\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 437\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.artistInvoiceSendOut + ', ' + this.state.yearofLastMonth));\n        } else {\n            var _lastSentDate4 = new Date(venue.allInvoicesLastSent);\n\n            return React.createElement(View, {\n              style: DocumentationStyles.entryInfo,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 453\n              }\n            }, React.createElement(Text, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 454\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate4.getMonth()] + ' ' + _lastSentDate4.getDate() + ', ' + _lastSentDate4.getFullYear()));\n          }\n    }\n  }, {\n    key: \"generateBookingListDisplay\",\n    value: function generateBookingListDisplay() {\n      var _this6 = this;\n\n      var date = new Date();\n      var venue = this.props.database.venues.find(function (venue) {\n        return venue.id === _this6.props.venue.id;\n      });\n\n      if (!venue.bookingListLastSent && date < this.state.sendOutDays.bookinglist) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481\n          }\n        }, React.createElement(Text, {\n          style: DocumentationStyles.setFontSizeMini,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.monthlyBookingListSendOut + ', ' + this.state.yearofLastMonth));\n      } else if (venue.bookingListLastSent && date < this.state.sendOutDays.bookinglist) {\n          var lastSentDate = new Date(venue.bookingListLastSent);\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 502\n            }\n          }, React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 503\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 511\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.monthlyBookingListSendOut + ', ' + this.state.yearofLastMonth));\n        } else {\n            var _lastSentDate5 = new Date(venue.bookingListLastSent);\n\n            return React.createElement(View, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 527\n              }\n            }, React.createElement(Text, {\n              style: DocumentationStyles.setFontSizeMini,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 528\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate5.getMonth()] + ' ' + _lastSentDate5.getDate() + ', ' + _lastSentDate5.getFullYear()));\n          }\n    }\n  }, {\n    key: \"generateCalendarDisplay\",\n    value: function generateCalendarDisplay() {\n      var _this7 = this;\n\n      var date = new Date();\n      var venue = this.props.database.venues.find(function (venue) {\n        return venue.id === _this7.props.venue.id;\n      });\n      console.log('[!] venue');\n      console.log(venue);\n\n      if (venue.calendarLastSent && date < this.state.sendOutDays.calendar) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 554\n          }\n        }, React.createElement(Text, {\n          style: DocumentationStyles.setFontSizeMini,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555\n          }\n        }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.monthlyCalendarSendOut + ', ' + this.state.yearofLastMonth));\n      } else if (venue.calendarLastSent && date < this.state.sendOutDays.calendar) {\n          var lastSentDate = new Date(venue.calendarLastSent);\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 571\n            }\n          }, React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 572\n            }\n          }, 'Last sent: ' + this.state.months[lastSentDate.getMonth()] + ' ' + lastSentDate.getDate() + ', ' + lastSentDate.getFullYear()), React.createElement(Text, {\n            style: DocumentationStyles.setFontSizeMini,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 580\n            }\n          }, 'Scheduled for: ' + this.state.months[this.state.lastMonth] + ' ' + this.props.venue.monthlyCalendarSendOut + ', ' + this.state.yearofLastMonth));\n        } else {\n            var _lastSentDate6 = new Date(venue.calendarLastSent);\n\n            return React.createElement(View, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 596\n              }\n            }, React.createElement(Text, {\n              style: DocumentationStyles.setFontSizeMini,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 597\n              }\n            }, 'Last sent: ' + this.state.months[_lastSentDate6.getMonth()] + ' ' + _lastSentDate6.getDate() + ', ' + _lastSentDate6.getFullYear()));\n          }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this8 = this;\n\n      return React.createElement(AppContainer, {\n        style: Styles.infoView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612\n        }\n      }, React.createElement(View, {\n        style: Styles.contentContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        }\n      }, React.createElement(Text, {\n        style: Styles.infoTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        }\n      }, \"Documentation\")), React.createElement(View, {\n        style: this.state.from === 'EventView' ? DocumentationStyles.entryContainer : Styles.hide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        }\n      }, \"Artist Confirmation\"), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingConfirmation,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send out this artist confirmation?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'artist_confirmation',\n                eventID: _this8.props.event.id\n              }).then(function () {\n                alert('Artist confirmation successfully sent!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the artist confirmation.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingConfirmation: false\n                });\n              });\n\n              alert('The artist confirmation is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingConfirmation: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628\n        }\n      }))), React.createElement(View, {\n        style: this.state.from === 'EventView' ? DocumentationStyles.entryContainer : Styles.hide,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        }\n      }, \"Artist Invoice\"), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingInvoice,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send this artist invoice?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'invoice',\n                eventID: _this8.props.event.id\n              }).then(function () {\n                alert('Artist invoice successfully sent!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the artist invoice.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingInvoice: false\n                });\n              });\n\n              alert('The artist invoice is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingInvoice: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 700\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761\n        }\n      }, this.state.banners.confirmations), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingAllConfirmations,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send all confirmations for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveAll({\n                type: 'artist_confirmation',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function (result) {\n                alert('All artist confirmations successfully sent!');\n              }).catch(function (result) {\n                if (!result.include('deadline-exceeded')) {\n                  alert('An error occurred while sending one of the artist confirmations.\\n' + result);\n                } else {\n                  alert('All artist confirmations successfully sent!');\n                }\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingAllConfirmations: false\n                });\n              });\n\n              alert('All of the artist confirmations are being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingAllConfirmations: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 766\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        }\n      }, this.state.banners.invoices), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingAllInvoices,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send the artist invoices for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveAll({\n                type: 'invoice',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function () {\n                alert('All artist invoices successfully sent!');\n              }).catch(function (result) {\n                if (!result.include('deadline-exceeded')) {\n                  alert('An error occurred while sending one of the artist invoices.\\n' + result);\n                } else {\n                  alert('All artist invoices successfully sent!');\n                }\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingAllInvoices: false\n                });\n              });\n\n              alert('All of the artist invoices are being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingAllInvoices: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911\n        }\n      }, this.state.banners.bookinglist), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingBookingList,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send the booking list for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'booking_list',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function () {\n                alert('Booking list successfully sent!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the booking list.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingBookingList: false\n                });\n              });\n\n              alert('The booking list is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingBookingList: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979\n        }\n      }, this.state.banners.calendar), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingCalendar,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send the calendar for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'calendar',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function () {\n                alert('Calendar successfully sent!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the calendar.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingCalendar: false\n                });\n              });\n\n              alert('The calendar is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingCalendar: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1047\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1048\n        }\n      }, this.state.banners.calendar), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1052\n        }\n      }, React.createElement(Button, {\n        title: \"Send\",\n        disabled: this.state.disableSendingCalendar,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send the calendar for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'calendar',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function () {\n                alert('Calendar successfully sent!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the calendar.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingCalendar: false\n                });\n              });\n\n              alert('The calendar is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingCalendar: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1115\n        }\n      }, React.createElement(Text, {\n        style: DocumentationStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116\n        }\n      }, \"Export to Excel\"), React.createElement(View, {\n        style: DocumentationStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118\n        }\n      }, React.createElement(Button, {\n        title: \"See\",\n        disabled: this.state.disableSendingCalendar,\n        onPress: function onPress() {\n          Alert.alert('Confirmation', 'Are you sure you want to send the calendar to excel file for the selected month?', [{\n            text: 'Cancel'\n          }, {\n            text: 'OK',\n            onPress: function onPress() {\n              _this8.props.database.generateSendSaveOne({\n                type: 'calendar',\n                venueID: _this8.props.venue.id,\n                month: _this8.props.date.getMonth() + 1,\n                year: _this8.props.date.getFullYear()\n              }).then(function () {\n                alert('Calendar successfully generate to Excel file!');\n              }).catch(function (err) {\n                alert('An error occurred while sending the calendar.\\n' + err);\n              }).finally(function () {\n                _this8.setState({\n                  disableSendingCalendar: false\n                });\n              });\n\n              alert('The calendar is being generated, saved to the Google Drive, and emailed out.' + ' Please wait until this has complete before requesting again.' + ' This may take up to a minute to complete.');\n\n              _this8.setState({\n                disableSendingCalendar: true\n              });\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1119\n        }\n      }))), React.createElement(View, {\n        style: DocumentationStyles.emptyContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1183\n        }\n      }));\n    }\n  }]);\n\n  return DocumentationView;\n}(React.Component), _class2.propTypes = {\n  database: PropTypes.instanceOf(Database),\n  event: PropTypes.instanceOf(Event),\n  venue: PropTypes.instanceOf(Venue).isRequired,\n  date: PropTypes.instanceOf(Date)\n}, _temp)) || _class);\nexport { DocumentationView as default };\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nvar scale = SCREEN_WIDTH / 320;\nexport function normalize(size) {\n  var newSize = size * scale;\n\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}\nexport function giveProperSize(size) {\n  if (size > 600) {\n    return 0.66;\n  } else {\n    return 2;\n  }\n}\nexport var DocumentationStyles = StyleSheet.create({\n  entryContainer: {\n    backgroundColor: '#fff',\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    padding: 7,\n    marginBottom: 5,\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: '#ccc',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginRight: 15,\n    marginLeft: 15\n  },\n  entryName: {\n    flexGrow: 3,\n    flexBasis: 60,\n    fontSize: 20\n  },\n  entryInfo: {\n    flexGrow: 3,\n    flexBasis: 10,\n    fontSize: normalize(15),\n    color: '#808080'\n  },\n  entryButton: {\n    backgroundColor: '#f8f8f8',\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 10,\n    flexGrow: 1,\n    flexBasis: 40,\n    margin: 5,\n    color: '#4682B4',\n    fontWeight: '200'\n  },\n  setFontSize: {\n    fontSize: normalize(14)\n  },\n  setFontSizeMini: {\n    fontSize: normalize(11)\n  },\n  emptyContainer: {\n    backgroundColor: '#fff',\n    display: 'flex',\n    flex: 5,\n    flexDirection: 'column',\n    padding: 4,\n    margin: 12,\n    alignItems: 'flex-start',\n    textAlign: 'left',\n    height: 64\n  },\n  sendButton: {\n    backgroundColor: '#f8f8f8',\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: '#ccc',\n    alignItems: 'center',\n    textAlign: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    bottom: normalize(26),\n    left: normalize(208),\n    height: normalize(32),\n    width: normalize(74)\n  }\n});","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/views/DocumentationView.js"],"names":["React","PropTypes","Event","Venue","RadioGroup","DateTimePicker","Styles","toAMPM","toDateString","toDateTime","toMilitaryTime","toTimeString","toUS","Database","withMappedNavigationProps","Dropdown","TimeInput","AppContainer","DocumentationView","props","state","from","disableSendingConfirmation","disableSendingInvoice","disableSendingBookingList","disableSendingCalendar","disableSendingAllConfirmations","disableSendingAllInvoices","banners","confirmations","invoices","bookinglist","calendar","display","confirmation","invoice","allConfirmations","allInvoices","sendOutDays","months","date","Date","day","getDate","yearOfThisMonth","getFullYear","thisMonth","getMonth","setMonth","nextMonth","yearOfNextMonth","lastMonth","yearofLastMonth","parseInt","venue","artistConfirmationSendOut","artistInvoiceSendOut","monthlyBookingListSendOut","monthlyCalendarSendOut","event","generateArtistConfirmationDisplay","generateArtistInvoiceDisplay","hide","generateAllConfirmationsDisplay","generateAllInvoicesDisplay","generateBookingListDisplay","generateCalendarDisplay","database","events","find","id","confirmationLastSent","DocumentationStyles","entryInfo","lastSentDate","invoiceLastSent","venues","allConfirmationsLastSent","setFontSizeMini","allInvoicesLastSent","bookingListLastSent","console","log","calendarLastSent","infoView","contentContainer","infoTitle","entryContainer","entryName","entryButton","Alert","alert","text","onPress","generateSendSaveOne","type","eventID","then","catch","err","finally","setState","cancelable","generateSendSaveAll","venueID","month","year","result","include","emptyContainer","Component","propTypes","instanceOf","isRequired","Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","scale","normalize","size","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","giveProperSize","StyleSheet","create","backgroundColor","flexDirection","flex","padding","marginBottom","borderWidth","borderRadius","borderColor","alignItems","justifyContent","marginRight","marginLeft","flexGrow","flexBasis","fontSize","color","margin","fontWeight","setFontSize","textAlign","sendButton","position","bottom","left"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Event, Venue } from '../objects';\nimport {\n  Alert,\n  Button,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { RadioGroup } from 'react-native-btr';\nimport DateTimePicker from 'react-native-modal-datetime-picker/src/index';\nimport Styles from '../styles';\nimport {\n  toAMPM,\n  toDateString,\n  toDateTime,\n  toMilitaryTime,\n  toTimeString,\n  toUS,\n} from '../util';\nimport Database from '../Database';\nimport { withMappedNavigationProps } from 'react-navigation-props-mapper';\nimport Dropdown from '../components/Dropdown';\nimport TimeInput from '../components/TimeInput';\nimport AppContainer from '../components/AppContainer';\nimport { Dimensions, Platform, PixelRatio } from 'react-native';\n\n@withMappedNavigationProps()\nexport default class DocumentationView extends React.Component {\n  static propTypes = {\n    database: PropTypes.instanceOf(Database),\n    event: PropTypes.instanceOf(Event),\n    venue: PropTypes.instanceOf(Venue).isRequired,\n    date: PropTypes.instanceOf(Date),\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      from: '',\n      disableSendingConfirmation: false,\n      disableSendingInvoice: false,\n      disableSendingBookingList: false,\n      disableSendingCalendar: false,\n      disableSendingAllConfirmations: false,\n      disableSendingAllInvoices: false,\n      banners: {\n        confirmations: '',\n        invoices: '',\n        bookinglist: '',\n        calendar: '',\n      },\n      display: {\n        confirmation: '',\n        invoice: '',\n        bookinglist: '',\n        calendar: '',\n        allConfirmations: '',\n        allInvoices: '',\n      },\n      sendOutDays: {\n        confirmations: '',\n        invoices: '',\n        bookinglist: '',\n        calendar: '',\n        allConfirmations: '',\n        allInvoices: '',\n      },\n      months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n      ],\n    };\n\n    // Set current, next, and last month & year\n    let date = new Date();\n    let day = date.getDate();\n    this.state.yearOfThisMonth = this.props.date.getFullYear();\n    this.state.thisMonth = this.props.date.getMonth();\n\n    date.setMonth(this.props.date.getMonth() + 1);\n    this.state.nextMonth = date.getMonth();\n    this.state.yearOfNextMonth = date.getFullYear();\n\n    date = new Date();\n    date.setMonth(this.props.date.getMonth() - 1);\n    this.state.lastMonth = date.getMonth();\n    this.state.yearofLastMonth = date.getFullYear();\n\n    // Set documentation send out days for this month, which will have all occured last month\n    this.state.sendOutDays.confirmations = new Date(\n      this.state.yearofLastMonth,\n      this.state.lastMonth,\n      parseInt(this.props.venue.artistConfirmationSendOut)\n    );\n    this.state.sendOutDays.invoices = new Date(\n      this.state.yearofLastMonth,\n      this.state.lastMonth,\n      this.props.venue.artistInvoiceSendOut\n    );\n    this.state.sendOutDays.bookinglist = new Date(\n      this.state.yearofLastMonth,\n      this.state.lastMonth,\n      this.props.venue.monthlyBookingListSendOut\n    );\n    this.state.sendOutDays.calendar = new Date(\n      this.state.yearofLastMonth,\n      this.state.lastMonth,\n      this.props.venue.monthlyCalendarSendOut\n    );\n\n    // Set banners to display each type of documentation\n    this.state.banners.confirmations =\n      this.state.months[this.state.thisMonth] +\n      ' ' +\n      this.state.yearOfThisMonth +\n      \"'s Confirmations\";\n    this.state.banners.invoices =\n      this.state.months[this.state.thisMonth] +\n      ' ' +\n      this.state.yearOfThisMonth +\n      \"'s Invoices\";\n    this.state.banners.bookinglist =\n      this.state.months[this.state.thisMonth] +\n      ' ' +\n      this.state.yearOfThisMonth +\n      \"'s Booking List\";\n    this.state.banners.calendar =\n      this.state.months[this.state.thisMonth] +\n      ' ' +\n      this.state.yearOfThisMonth +\n      \"'s Calendar\";\n\n    // If you got here from EventView, set the displays accordingly\n    if (this.props.event) {\n      this.state.from = 'EventView';\n      this.state.display.confirmation = this.generateArtistConfirmationDisplay();\n      this.state.display.invoice = this.generateArtistInvoiceDisplay();\n      this.state.display.allConfirmations = <View style={Styles.hide}></View>;\n      this.state.display.allInvoices = <View style={Styles.hide}></View>;\n    }\n\n    // If you got here from the MonthView, set the displays accordingly\n    else {\n      this.state.from = 'MonthView';\n      this.state.display.confirmation = <View style={Styles.hide}></View>;\n      this.state.display.invoice = <View style={Styles.hide}></View>;\n      this.state.display.allConfirmations = this.generateAllConfirmationsDisplay();\n      this.state.display.allInvoices = this.generateAllInvoicesDisplay();\n    }\n    this.state.display.bookinglist = this.generateBookingListDisplay();\n    this.state.display.calendar = this.generateCalendarDisplay();\n  }\n\n  generateArtistConfirmationDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent event from database\n    let event = this.props.database.events.find(\n      (event) => event.id === this.props.event.id\n    );\n\n    // If the confirmation for this event hasn't been sent out yet and the confirmation send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (\n      event.confirmationLastSent &&\n      date < this.state.sendOutDays.confirmations\n    ) {\n      return (\n        // <View>\n        <Text style={DocumentationStyles.entryInfo}>\n          {'Scheduled for: ' +\n            this.state.months[this.state.lastMonth] +\n            ' ' +\n            this.props.venue.artistConfirmationSendOut +\n            ', ' +\n            this.state.yearofLastMonth}\n        </Text>\n      );\n      // </View>);\n    }\n\n    // Else if the confirmation has been sent manually but the confirmation send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    else if (\n      event.confirmationLastSent &&\n      date < this.state.sendOutDays.confirmations\n    ) {\n      let lastSentDate = new Date(event.confirmationLastSent);\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistConfirmationSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n          );\n        </View>\n      );\n    }\n\n    // Else, the confirmation send out day has occured so the confirmation has guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      let lastSentDate = new Date(event.confirmationLastSent);\n      return (\n        // <View>\n        <Text style={DocumentationStyles.entryInfo}>\n          {'Last sent: ' +\n            this.state.months[lastSentDate.getMonth()] +\n            ' ' +\n            lastSentDate.getDate() +\n            ', ' +\n            lastSentDate.getFullYear()}\n        </Text>\n      );\n      // </View>)\n    }\n  }\n\n  generateArtistInvoiceDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent event from database\n    let event = this.props.database.events.find(\n      (event) => event.id === this.props.event.id\n    );\n\n    // If the invoice for this event hasn't been sent out yet and the invoice send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (event.invoiceLastSent && date < this.state.sendOutDays.invoices) {\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistInvoiceSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else if the invoice has been sent manually but the invoice send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    else if (event.invoiceLastSent && date < this.state.sendOutDays.invoices) {\n      let lastSentDate = new Date(event.invoiceLastSent);\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistInvoiceSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else, the invoice send out day has occured so the invoice has guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      // let lastSentDate = new Date(event.invoiceLastSent);\n      // return (\n      // // <View>\n      //     <Text style={DocumentationStyles.entryInfo}>\n      //     {\"Last sent: \" + this.state.months[lastSentDate.getMonth()] + \" \" + lastSentDate.getDate() + \", \" + lastSentDate.getFullYear()}\n      //     </Text>);\n      // // </View>)\n      let lastSentDate = new Date(event.invoiceLastSent);\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistInvoiceSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  generateAllConfirmationsDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent venue from database\n    let venue = this.props.database.venues.find(\n      (venue) => venue.id === this.props.venue.id\n    );\n\n    // If the confirmations for this venue haven't been sent out yet and the confirmation send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (\n      venue.allConfirmationsLastSent &&\n      date < this.state.sendOutDays.confirmations\n    ) {\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistConfirmationSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else if the confirmations have been sent manually but the invoice send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    else if (\n      venue.allConfirmationsLastSent &&\n      date < this.state.sendOutDays.confirmations\n    ) {\n      let lastSentDate = new Date(venue.allConfirmationsLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistConfirmationSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else, the confirmation send out day has occured so the confirmations are guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      let lastSentDate = new Date(venue.allConfirmationsLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  generateAllInvoicesDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent venue from database\n    let venue = this.props.database.venues.find(\n      (venue) => venue.id === this.props.venue.id\n    );\n\n    // If the invoices for this venue haven't been sent out yet and the invoice send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (venue.allInvoicesLastSent && date < this.state.sendOutDays.invoices) {\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistInvoiceSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else if the invoices have been sent manually but the invoice send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    else if (\n      venue.allInvoicesLastSent &&\n      date < this.state.sendOutDays.invoices\n    ) {\n      let lastSentDate = new Date(venue.allInvoicesLastSent);\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.artistInvoiceSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else, the invoice send out day has occured so the invoices are guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      let lastSentDate = new Date(venue.allInvoicesLastSent);\n      return (\n        <View style={DocumentationStyles.entryInfo}>\n          <Text>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  generateBookingListDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent venue from database\n    let venue = this.props.database.venues.find(\n      (venue) => venue.id === this.props.venue.id\n    );\n\n    // If the booking list for this venue hasn't been sent out yet and the booking list send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (\n      !venue.bookingListLastSent &&\n      date < this.state.sendOutDays.bookinglist\n    ) {\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.monthlyBookingListSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else if the booking list has been sent manually but the booking list send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    // else if (this.props.venue.bookingListastSent && date < this.state.sendOutDays.bookinglist) {\n    else if (\n      venue.bookingListLastSent &&\n      date < this.state.sendOutDays.bookinglist\n    ) {\n      let lastSentDate = new Date(venue.bookingListLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.monthlyBookingListSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else, the booking list send out day has occured so the booking list has guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      let lastSentDate = new Date(venue.bookingListLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  generateCalendarDisplay() {\n    let date = new Date();\n\n    // Retrieve most recent venue from database\n    let venue = this.props.database.venues.find(\n      (venue) => venue.id === this.props.venue.id\n    );\n    console.log('[!] venue');\n    console.log(venue);\n\n    // If the calendar for this venue hasn't been sent out yet and the calendar send out date hasn't occured yet, banner should read \"Scheduled for: \"\n    if (venue.calendarLastSent && date < this.state.sendOutDays.calendar) {\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.monthlyCalendarSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else if the calendar has been sent manually but the calendar send out day hasn't occured yet, banner should read \"Last Sent: & Scheduled for: \"\n    else if (venue.calendarLastSent && date < this.state.sendOutDays.calendar) {\n      let lastSentDate = new Date(venue.calendarLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Scheduled for: ' +\n              this.state.months[this.state.lastMonth] +\n              ' ' +\n              this.props.venue.monthlyCalendarSendOut +\n              ', ' +\n              this.state.yearofLastMonth}\n          </Text>\n        </View>\n      );\n    }\n\n    // Else, the calendar send out day has occured so the calendar has guaranteed to be sent, banner should read \"Last Sent: \"\n    else {\n      let lastSentDate = new Date(venue.calendarLastSent);\n      return (\n        <View>\n          <Text style={DocumentationStyles.setFontSizeMini}>\n            {'Last sent: ' +\n              this.state.months[lastSentDate.getMonth()] +\n              ' ' +\n              lastSentDate.getDate() +\n              ', ' +\n              lastSentDate.getFullYear()}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <AppContainer style={Styles.infoView}>\n        <View style={Styles.contentContainer}>\n          <Text style={Styles.infoTitle}>Documentation</Text>\n        </View>\n        <View\n          style={\n            this.state.from === 'EventView'\n              ? DocumentationStyles.entryContainer\n              : Styles.hide\n          }\n        >\n          {/* <View> */}\n          <Text style={DocumentationStyles.entryName}>Artist Confirmation</Text>\n          {/* {this.state.display.confirmation}\n                    </View> */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingConfirmation}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send out this artist confirmation?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'artist_confirmation',\n                            eventID: this.props.event.id,\n                          })\n                          .then(() => {\n                            alert('Artist confirmation successfully sent!');\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the artist confirmation.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingConfirmation: false,\n                              // display: {\n                              //     confirmation: this.generateArtistConfirmationDisplay(),\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.bookinglist,\n                              //     calendar: this.state.display.calendar,\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The artist confirmation is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingConfirmation: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View\n          style={\n            this.state.from === 'EventView'\n              ? DocumentationStyles.entryContainer\n              : Styles.hide\n          }\n        >\n          {/* <View> */}\n          <Text style={DocumentationStyles.entryName}>Artist Invoice</Text>\n          {/* {this.state.display.invoice} */}\n          {/* </View> */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingInvoice}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send this artist invoice?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'invoice',\n                            eventID: this.props.event.id,\n                          })\n                          .then(() => {\n                            alert('Artist invoice successfully sent!');\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the artist invoice.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingInvoice: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.generateArtistInvoiceDisplay(),\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.state.display.calendar,\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The artist invoice is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingInvoice: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>\n            {this.state.banners.confirmations}\n          </Text>\n          {/* {this.state.display.allConfirmations} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingAllConfirmations}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send all confirmations for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveAll({\n                            type: 'artist_confirmation',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then((result) => {\n                            alert(\n                              'All artist confirmations successfully sent!'\n                            );\n                          })\n                          .catch((result) => {\n                            if (!result.include('deadline-exceeded')) {\n                              // supress the deadline-exceeded error\n                              alert(\n                                'An error occurred while sending one of the artist confirmations.\\n' +\n                                  result\n                              );\n                            } else {\n                              alert(\n                                'All artist confirmations successfully sent!'\n                              );\n                            }\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingAllConfirmations: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.state.display.calendar,\n                              //     allConfirmations: this.generateAllConfirmationsDisplay(),\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'All of the artist confirmations are being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingAllConfirmations: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>\n            {this.state.banners.invoices}\n          </Text>\n          {/* {this.state.display.allInvoices} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingAllInvoices}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send the artist invoices for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveAll({\n                            type: 'invoice',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then(() => {\n                            alert('All artist invoices successfully sent!');\n                          })\n                          .catch((result) => {\n                            if (!result.include('deadline-exceeded')) {\n                              // supress the deadline-exceeded error\n                              alert(\n                                'An error occurred while sending one of the artist invoices.\\n' +\n                                  result\n                              );\n                            } else {\n                              alert('All artist invoices successfully sent!');\n                            }\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingAllInvoices: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.state.display.calendar,\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.generateAllInvoicesDisplay()\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'All of the artist invoices are being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingAllInvoices: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>\n            {this.state.banners.bookinglist}\n          </Text>\n          {/* {this.state.display.bookinglist} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingBookingList}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send the booking list for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'booking_list',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then(() => {\n                            alert('Booking list successfully sent!');\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the booking list.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingBookingList: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.generateBookingListDisplay(),\n                              //     calendar: this.state.display.calendar,\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The booking list is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingBookingList: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>\n            {this.state.banners.calendar}\n          </Text>\n          {/* {this.state.display.calendar} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingCalendar}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send the calendar for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'calendar',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then(() => {\n                            alert('Calendar successfully sent!');\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the calendar.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingCalendar: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.generateCalendarDisplay(),\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The calendar is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingCalendar: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>\n            {this.state.banners.calendar}\n          </Text>\n          {/* {this.state.display.calendar} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='Send'\n              disabled={this.state.disableSendingCalendar}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send the calendar for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'calendar',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then(() => {\n                            alert('Calendar successfully sent!');\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the calendar.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingCalendar: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.generateCalendarDisplay(),\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The calendar is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingCalendar: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.entryContainer}>\n          <Text style={DocumentationStyles.entryName}>Export to Excel</Text>\n          {/* {this.state.display.calendar} */}\n          <View style={DocumentationStyles.entryButton}>\n            <Button\n              title='See'\n              disabled={this.state.disableSendingCalendar}\n              onPress={() => {\n                Alert.alert(\n                  'Confirmation',\n                  'Are you sure you want to send the calendar to excel file for the selected month?',\n                  [\n                    {\n                      text: 'Cancel',\n                    },\n                    {\n                      text: 'OK',\n                      onPress: () => {\n                        this.props.database\n                          .generateSendSaveOne({\n                            type: 'calendar',\n                            venueID: this.props.venue.id,\n                            month: this.props.date.getMonth() + 1,\n                            year: this.props.date.getFullYear(),\n                          })\n                          .then(() => {\n                            alert(\n                              'Calendar successfully generate to Excel file!'\n                            );\n                          })\n                          .catch((err) => {\n                            alert(\n                              'An error occurred while sending the calendar.\\n' +\n                                err\n                            );\n                          })\n                          .finally(() => {\n                            this.setState({\n                              disableSendingCalendar: false,\n                              // display: {\n                              //     confirmation: this.state.display.confirmation,\n                              //     invoice: this.state.display.invoice,\n                              //     bookinglist: this.state.display.bookinglist,\n                              //     calendar: this.generateCalendarDisplay(),\n                              //     allConfirmations: this.state.display.allConfirmations,\n                              //     allInvoices: this.state.display.allInvoices\n                              // }\n                            });\n                          });\n\n                        alert(\n                          'The calendar is being generated, saved to the Google Drive, and emailed out.' +\n                            ' Please wait until this has complete before requesting again.' +\n                            ' This may take up to a minute to complete.'\n                        );\n\n                        this.setState({\n                          disableSendingCalendar: true,\n                        });\n                      },\n                    },\n                  ],\n                  { cancelable: true }\n                );\n              }}\n            />\n          </View>\n        </View>\n        <View style={DocumentationStyles.emptyContainer}></View>\n      </AppContainer>\n    );\n  }\n}\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\n// based on iphone 5s's scale\nconst scale = SCREEN_WIDTH / 320;\n\nexport function normalize(size) {\n  const newSize = size * scale;\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}\n\nexport function giveProperSize(size) {\n  if (size > 600) {\n    return 0.66;\n  } else {\n    return 2;\n  }\n}\n\nexport const DocumentationStyles = StyleSheet.create({\n  entryContainer: {\n    // backgroundColor: \"#fff\",\n    // display: \"flex\",\n    // flex: giveProperSize(SCREEN_HEIGHT),\n    // flexDirection: \"column\",\n    // fontSize: normalize(24),\n    // padding: 4,\n    // margin: 12,\n    // borderWidth: 1,\n    // borderRadius: 10,\n    // borderColor: \"#ccc\",\n    // alignItems: \"flex-start\",\n    // textAlign: \"left\",\n    // height: 64,\n    backgroundColor: '#fff',\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    padding: 7,\n    marginBottom: 5,\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: '#ccc',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginRight: 15,\n    marginLeft: 15,\n  },\n  entryName: {\n    // flexGrow: 3,\n    // flexBasis: 60,\n    // fontSize: 20,\n    // color: \"pink\"\n    flexGrow: 3,\n    flexBasis: 60,\n    fontSize: 20,\n  },\n  entryInfo: {\n    flexGrow: 3,\n    // flexBasis: 60,\n    flexBasis: 10,\n    fontSize: normalize(15),\n    color: '#808080',\n  },\n  entryButton: {\n    backgroundColor: '#f8f8f8',\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 10,\n    flexGrow: 1,\n    flexBasis: 40,\n    margin: 5,\n    color: '#4682B4',\n    fontWeight: '200',\n  },\n  setFontSize: {\n    fontSize: normalize(14),\n  },\n  setFontSizeMini: {\n    fontSize: normalize(11),\n  },\n  emptyContainer: {\n    backgroundColor: '#fff',\n    display: 'flex',\n    flex: 5,\n    flexDirection: 'column',\n    //font-size: 18px,\n    padding: 4,\n    margin: 12,\n    //borderWidth: 1,\n    //borderRadius: 10,\n    //borderColor: \"#ccc\",\n    alignItems: 'flex-start',\n    textAlign: 'left',\n    height: 64,\n    //justifyContent: \"center\"\n  },\n  sendButton: {\n    backgroundColor: '#f8f8f8',\n    //display: \"flex\",\n    flexDirection: 'row',\n    //padding: 20,\n    //margin: 10,\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: '#ccc',\n    alignItems: 'center',\n    textAlign: 'center',\n    justifyContent: 'center',\n    //left: 12,\n    position: 'relative',\n    bottom: normalize(26),\n    left: normalize(208),\n    height: normalize(32),\n    width: normalize(74),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}