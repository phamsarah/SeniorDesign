{"ast":null,"code":"import TinyColor from \"tinycolor2\";\nimport RandomColor from \"randomcolor\";\nexport function toDateString(_date) {\n  var year = _date.getFullYear();\n\n  var month = _date.getMonth() + 1;\n\n  var date = _date.getDate();\n\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  if (date < 10) {\n    date = \"0\" + date;\n  }\n\n  return [year, month, date].join(\"-\");\n}\nexport function toMonthString(_date) {\n  var year = _date.getFullYear();\n\n  var month = _date.getMonth() + 1;\n\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  return [year, month].join(\"-\");\n}\nexport function toTimeString(time) {\n  var minutes = time.getMinutes();\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  return [time.getHours(), minutes].join(\":\");\n}\nexport function toAMPM(militaryTime) {\n  var splits = militaryTime.split(\":\");\n  var ampm = \"AM\";\n  var hour = parseInt(splits[0]);\n\n  if (hour === 12 || hour === 0) {\n    splits[0] = \"12\";\n    ampm = hour === 12 ? \"PM\" : \"AM\";\n  } else if (hour > 12) {\n    splits[0] = (hour - 12).toString();\n    ampm = \"PM\";\n  }\n\n  return [splits.join(\":\"), ampm].join(\" \");\n}\nexport function toMilitaryTime(ampmTime) {\n  var splits = ampmTime.split(\" \");\n  var ampm = splits[1];\n  splits = splits[0].split(\":\");\n  var hour = parseInt(splits[0]);\n\n  if (hour === 12 && ampm === \"AM\") {\n    hour = 0;\n  } else if (hour < 12 && ampm === \"PM\") {\n    hour += 12;\n  }\n\n  return [hour, splits[1]].join(\":\");\n}\nexport function toDateTime(data) {\n  if (!data) data = {};\n  var returnDateTime = new Date();\n\n  if (data.date) {\n    var toParse = data.date;\n\n    if (data.date.includes(\"/\")) {\n      toParse = toISO(data.date);\n    }\n\n    var splits = toParse.split(\"-\");\n    returnDateTime.setFullYear(parseInt(splits[0]), parseInt(splits[1]) - 1, parseInt(splits[2]));\n  }\n\n  if (data.time) {\n    var _splits = data.time.split(\":\");\n\n    returnDateTime.setHours(parseInt(_splits[0]), parseInt(_splits[1]), 0, 0);\n  } else {\n    returnDateTime.setHours(0, 0, 0, 0);\n  }\n\n  return returnDateTime;\n}\nexport function toUS(isoDate) {\n  var splits = isoDate.split(\"-\");\n  var year = splits[0];\n  var month = splits[1];\n  var date = splits[2];\n\n  if (parseInt(month) < 10) {\n    month = month[1];\n  }\n\n  if (parseInt(date) < 10) {\n    date = date[1];\n  }\n\n  return [month, date, year].join(\"/\");\n}\nexport function toISO(usDate) {\n  var splits = usDate.split(\"/\");\n  var month = splits[0];\n  var date = splits[1];\n  var year = splits[2];\n\n  if (parseInt(month) < 10) {\n    month = \"0\" + month;\n  }\n\n  if (parseInt(date) < 10) {\n    date = \"0\" + date;\n  }\n\n  return [year, month, date].join(\"-\");\n}\nvar dayInMS = 24 * 60 * 60 * 1000;\nexport { dayInMS };\nexport function randomColor(seed) {\n  var color = TinyColor(RandomColor({\n    seed: seed\n  }));\n  return {\n    hex: color.toHexString(),\n    isDark: color.isDark()\n  };\n}\nexport function blackColor() {\n  var color = TinyColor(\"black\");\n  return {\n    hex: color.toHexString(),\n    isDark: color.isDark()\n  };\n}\nexport function objectToArray(object) {\n  var returnArray = [];\n\n  for (var key in object) {\n    if (object.hasOwnProperty(key)) {\n      var toAdd = object[key];\n      toAdd.id = key;\n      returnArray.push(toAdd);\n    }\n  }\n\n  return returnArray;\n}\n;","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/util.js"],"names":["TinyColor","RandomColor","toDateString","_date","year","getFullYear","month","getMonth","date","getDate","join","toMonthString","toTimeString","time","minutes","getMinutes","getHours","toAMPM","militaryTime","splits","split","ampm","hour","parseInt","toString","toMilitaryTime","ampmTime","toDateTime","data","returnDateTime","Date","toParse","includes","toISO","setFullYear","setHours","toUS","isoDate","usDate","dayInMS","randomColor","seed","color","hex","toHexString","isDark","blackColor","objectToArray","object","returnArray","key","hasOwnProperty","toAdd","id","push"],"mappings":"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","sourcesContent":["import TinyColor from \"tinycolor2\";\r\nimport RandomColor from \"randomcolor\";\r\n\r\n//handles converting a JS Date object into an ISO date string (YYYY-MM-DD)\r\nexport function toDateString(_date) {\r\n    let year = _date.getFullYear();\r\n    let month = _date.getMonth() + 1;\r\n    let date = _date.getDate();\r\n\r\n    //add trailing 0s\r\n    if (month < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n    if (date < 10) {\r\n        date = \"0\" + date;\r\n    }\r\n\r\n    return [year, month, date].join(\"-\");\r\n}\r\n\r\n//handles converting a JS Date object into a \"YYYY-MM\" string\r\nexport function toMonthString(_date) {\r\n    let year = _date.getFullYear();\r\n    let month = _date.getMonth() + 1;\r\n\r\n    //add trailing 0s\r\n    if (month < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n\r\n    return [year, month].join(\"-\");\r\n}\r\n\r\n//handles converting a JS date object into a time string (HH:mm)\r\nexport function toTimeString(time) {\r\n    let minutes = time.getMinutes();\r\n    if (minutes < 10) {\r\n        minutes = \"0\" + minutes;\r\n    }\r\n\r\n    return [time.getHours(), minutes].join(\":\");\r\n}\r\n\r\n//handles converting military time to AM/PM format\r\nexport function toAMPM(militaryTime) {\r\n    let splits = militaryTime.split(\":\");\r\n\r\n    let ampm = \"AM\";\r\n    let hour = parseInt(splits[0]);\r\n\r\n    if (hour === 12 || hour === 0) {\r\n        splits[0] = \"12\";\r\n        ampm = hour === 12 ? \"PM\" : \"AM\";\r\n    } else if (hour > 12) {\r\n        splits[0] = (hour - 12).toString();\r\n        ampm = \"PM\";\r\n    }\r\n\r\n    return [splits.join(\":\"), ampm].join(\" \");\r\n}\r\n\r\nexport function toMilitaryTime(ampmTime) {\r\n    let splits = ampmTime.split(\" \");\r\n    let ampm = splits[1];\r\n\r\n    splits = splits[0].split(\":\");\r\n\r\n    let hour = parseInt(splits[0]);\r\n\r\n    if (hour === 12 && ampm === \"AM\") {\r\n        hour = 0;\r\n    } else if (hour < 12 && ampm === \"PM\") {\r\n        hour += 12;\r\n    }\r\n\r\n    return [hour, splits[1]].join(\":\");\r\n}\r\n\r\n//handles converting given options of date and/or time into a JS date object\r\nexport function toDateTime(data) {\r\n    if (!data) data = {};\r\n\r\n    let returnDateTime = new Date();\r\n\r\n    if (data.date) {\r\n        let toParse = data.date;\r\n        if (data.date.includes(\"/\")) {\r\n            toParse = toISO(data.date);\r\n        }\r\n\r\n        let splits = toParse.split(\"-\");\r\n        returnDateTime.setFullYear(parseInt(splits[0]), parseInt(splits[1]) - 1, parseInt(splits[2]));\r\n    }\r\n    if (data.time) {\r\n        let splits = data.time.split(\":\");\r\n        returnDateTime.setHours(parseInt(splits[0]), parseInt(splits[1]), 0, 0);\r\n    } else {\r\n        returnDateTime.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    return returnDateTime;\r\n}\r\n\r\n//handles converting ISO date strings into US date strings\r\nexport function toUS(isoDate) {\r\n    let splits = isoDate.split(\"-\");\r\n\r\n    let year = splits[0];\r\n    let month = splits[1];\r\n    let date = splits[2];\r\n\r\n    //remove trailing 0s\r\n    if (parseInt(month) < 10) {\r\n        month = month[1];\r\n    }\r\n    if (parseInt(date) < 10) {\r\n        date = date[1];\r\n    }\r\n\r\n    return [month, date, year].join(\"/\");\r\n}\r\n\r\n//handles converting US date strings into ISO date strings\r\nexport function toISO(usDate) {\r\n    let splits = usDate.split(\"/\");\r\n\r\n    let month = splits[0];\r\n    let date = splits[1];\r\n    let year = splits[2];\r\n\r\n    //insert trailing 0s\r\n    if (parseInt(month) < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n    if (parseInt(date) < 10) {\r\n        date = \"0\" + date;\r\n    }\r\n\r\n    return [year, month, date].join(\"-\");\r\n}\r\n\r\n//useful variable containing exactly how many milliseconds are in a day\r\nlet dayInMS = 24 * 60 * 60 * 1000;\r\nexport { dayInMS };\r\n\r\nexport function randomColor(seed) {\r\n    let color = TinyColor(RandomColor({seed: seed}));\r\n    return {\r\n        hex: color.toHexString(),\r\n        isDark: color.isDark()\r\n    };\r\n}\r\n\r\nexport function blackColor() {\r\n    let color = TinyColor(\"black\");\r\n    return {\r\n        hex: color.toHexString(),\r\n        isDark: color.isDark()\r\n    };\r\n}\r\n\r\nexport function objectToArray(object) {\r\n    let returnArray = [];\r\n\r\n    for (let key in object) {\r\n        if (object.hasOwnProperty(key)) {\r\n            let toAdd = object[key];\r\n            toAdd.id = key;\r\n            returnArray.push(toAdd);\r\n        }\r\n    }\r\n\r\n    return returnArray;\r\n};"]},"metadata":{},"sourceType":"module"}