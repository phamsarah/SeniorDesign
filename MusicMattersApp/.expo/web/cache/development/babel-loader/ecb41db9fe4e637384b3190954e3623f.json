{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec,\n    _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dennis/Desktop/music-matters-bookings-system-working/views/MonthView.js\";\n\nimport React from 'react';\nimport { randomColor, toDateString, toDateTime, toMonthString, blackColor } from \"../util\";\nimport Styles from \"../styles\";\nimport { CalendarList } from \"react-native-calendars\";\nimport _ from \"lodash\";\nimport Dropdown from \"../components/Dropdown\";\nimport AppContainer from \"../components/AppContainer\";\nimport MoreButton from \"../components/MoreButton\";\nimport { Venue } from \"../objects\";\nimport Database from \"../Database\";\nimport PropTypes from 'prop-types';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { withMappedNavigationProps } from \"react-navigation-props-mapper\";\nvar MonthView = (_dec = withMappedNavigationProps(), _dec(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(MonthView, _React$Component);\n\n  function MonthView(props) {\n    var _this;\n\n    _classCallCheck(this, MonthView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MonthView).call(this, props));\n    var currentDate = new Date();\n    _this.state = {\n      selectedMonth: currentDate.getMonth(),\n      selectedYear: currentDate.getFullYear(),\n      disableSendingEmails: false,\n      markedDates: _this._generateMarkedDates(),\n      activeMonth: {}\n    };\n\n    _this.props.navigation.addListener('didFocus', function () {\n      _this.setState({\n        markedDates: _this._generateMarkedDates()\n      });\n\n      _this.forceUpdate();\n    });\n\n    return _this;\n  }\n\n  _createClass(MonthView, [{\n    key: \"_generateMarkedDates\",\n    value: function _generateMarkedDates() {\n      var _this2 = this;\n\n      var colors = {};\n      this.props.database.clients.forEach(function (client) {\n        colors[client.id] = {\n          key: client.id,\n          color: randomColor(client.id).hex\n        };\n      });\n      var thisVenuesEvents = this.props.database.events.filter(function (event) {\n        return event.venueID === _this2.props.selectedVenue.id;\n      });\n      var markedDates = {};\n      thisVenuesEvents.forEach(function (event) {\n        var eventDate = toDateString(event.start);\n\n        if (!markedDates[eventDate]) {\n          markedDates[eventDate] = {\n            dots: []\n          };\n        }\n\n        if (_this2.props.database.clients.find(function (client) {\n          return client.id === event.clientID;\n        })) {\n          markedDates[eventDate].dots.push(colors[event.clientID]);\n        } else {\n          markedDates[eventDate].dots.push({\n            key: -1,\n            color: \"#000000\"\n          });\n        }\n      });\n      this.props.database.footballGames.auburn.forEach(function (game) {\n        if (!markedDates[game.date]) {\n          markedDates[game.date] = {\n            dots: []\n          };\n        }\n\n        markedDates[game.date].dots.push({\n          key: game.date + \"-auburn\",\n          color: \"#8B4513\"\n        });\n      });\n      this.props.database.footballGames.alabama.forEach(function (game) {\n        if (!markedDates[game.date]) {\n          markedDates[game.date] = {\n            dots: []\n          };\n        }\n\n        markedDates[game.date].dots.push({\n          key: game.date + \"-alabama\",\n          color: \"#8B4513\"\n        });\n      });\n      this.props.database.holidays.forEach(function (holiday) {\n        var dateString = holiday.date.split(' ')[0];\n\n        if (!markedDates[dateString]) {\n          markedDates[dateString] = {\n            dots: []\n          };\n        }\n\n        markedDates[dateString].dots.push({\n          color: \"#556B2F\"\n        });\n      });\n      return markedDates;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(AppContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }, React.createElement(View, {\n        style: Styles.calendarHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        }\n      }, React.createElement(Dropdown, {\n        style: Styles.calendarDropdown,\n        options: this.props.database.venues.map(function (venue) {\n          return {\n            label: venue.name,\n            value: venue.id\n          };\n        }),\n        selectedValue: this.props.selectedVenue.id,\n        onValueChange: function onValueChange(venueID) {\n          if (venueID !== null) {\n            _this3.setState({\n              selectedValue: _this3.props.database.venues.find(function (venue) {\n                return venue.id === venueID;\n              })\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }), React.createElement(MoreButton, {\n        onPress: function onPress() {\n          return _this3.props.navigation.navigate(\"VenueManage\", {\n            database: _this3.props.database,\n            onReturn: function onReturn(venues) {\n              console.log(venues);\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      })), React.createElement(CalendarList, {\n        style: Styles.monthView,\n        horizontal: true,\n        pagingEnabled: true,\n        hideArrows: true,\n        markingType: \"multi-dot\",\n        markedDates: this.state.markedDates,\n        onDayPress: function onDayPress(day) {\n          _this3.props.navigation.navigate(\"Day\", {\n            onGoBack: function onGoBack() {\n              return _this3.forceUpdate();\n            },\n            selectedDate: toDateTime({\n              date: day.dateString\n            }),\n            selectedVenue: _this3.props.selectedVenue,\n            database: _this3.props.database\n          });\n        },\n        onVisibleMonthsChange: function onVisibleMonthsChange(months) {\n          _this3.state.activeMonth = new Date(months[0].year, months[0].month - 1, 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        }\n      }), React.createElement(View, {\n        style: Styles.buttonContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        }\n      }, React.createElement(Button, {\n        title: \"Generate Forms\",\n        disabled: this.state.disableSendingEmails,\n        onPress: function onPress() {\n          _this3.props.navigation.navigate(\"Documentation\", {\n            database: _this3.props.database,\n            venue: _this3.props.selectedVenue,\n            date: _this3.state.activeMonth\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        }\n      })));\n    }\n  }]);\n\n  return MonthView;\n}(React.Component), _class2.propTypes = {\n  selectedVenue: PropTypes.instanceOf(Venue).isRequired,\n  database: PropTypes.instanceOf(Database).isRequired\n}, _temp)) || _class);\nexport default MonthView;","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/views/MonthView.js"],"names":["React","randomColor","toDateString","toDateTime","toMonthString","blackColor","Styles","CalendarList","_","Dropdown","AppContainer","MoreButton","Venue","Database","PropTypes","withMappedNavigationProps","MonthView","props","currentDate","Date","state","selectedMonth","getMonth","selectedYear","getFullYear","disableSendingEmails","markedDates","_generateMarkedDates","activeMonth","navigation","addListener","setState","forceUpdate","colors","database","clients","forEach","client","id","key","color","hex","thisVenuesEvents","events","filter","event","venueID","selectedVenue","eventDate","start","dots","find","clientID","push","footballGames","auburn","game","date","alabama","holidays","holiday","dateString","split","calendarHeader","calendarDropdown","venues","map","venue","label","name","value","selectedValue","navigate","onReturn","console","log","monthView","day","onGoBack","selectedDate","months","year","month","buttonContainer","Component","propTypes","instanceOf","isRequired"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,aAA/C,EAA8DC,UAA9D;AACA,OAAOC,MAAP;AACA,SAAQC,YAAR,QAA2B,wBAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP;AACA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,SAAQC,KAAR;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAEA,SAAQC,yBAAR,QAAwC,+BAAxC;IAGMC,S,WADLD,yBAAyB,E;;;AAOtB,qBAAYE,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AAEA,QAAIC,WAAW,GAAG,IAAIC,IAAJ,EAAlB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAEH,WAAW,CAACI,QAAZ,EADN;AAETC,MAAAA,YAAY,EAAEL,WAAW,CAACM,WAAZ,EAFL;AAGTC,MAAAA,oBAAoB,EAAE,KAHb;AAITC,MAAAA,WAAW,EAAE,MAAKC,oBAAL,EAJJ;AAKTC,MAAAA,WAAW,EAAE;AALJ,KAAb;;AASA,UAAKX,KAAL,CAAWY,UAAX,CAAsBC,WAAtB,CAAkC,UAAlC,EAA8C,YAAM;AAChD,YAAKC,QAAL,CAAc;AACVL,QAAAA,WAAW,EAAE,MAAKC,oBAAL;AADH,OAAd;;AAGA,YAAKK,WAAL;AACH,KALD;;AAbe;AAmBlB;;;;2CAEsB;AAAA;;AAGnB,UAAIC,MAAM,GAAG,EAAb;AACA,WAAKhB,KAAL,CAAWiB,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,CAAoC,UAAAC,MAAM,EAAI;AAC1CJ,QAAAA,MAAM,CAACI,MAAM,CAACC,EAAR,CAAN,GAAoB;AAChBC,UAAAA,GAAG,EAAEF,MAAM,CAACC,EADI;AAEhBE,UAAAA,KAAK,EAAEvC,WAAW,CAACoC,MAAM,CAACC,EAAR,CAAX,CAAuBG;AAFd,SAApB;AAIH,OALD;AAOA,UAAIC,gBAAgB,GAAG,KAAKzB,KAAL,CAAWiB,QAAX,CAAoBS,MAApB,CAA2BC,MAA3B,CAAkC,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,OAAN,KAAkB,MAAI,CAAC7B,KAAL,CAAW8B,aAAX,CAAyBT,EAA/C;AAAA,OAAvC,CAAvB;AACA,UAAIZ,WAAW,GAAG,EAAlB;AACAgB,MAAAA,gBAAgB,CAACN,OAAjB,CAAyB,UAAAS,KAAK,EAAI;AAC9B,YAAIG,SAAS,GAAG9C,YAAY,CAAC2C,KAAK,CAACI,KAAP,CAA5B;;AAEA,YAAI,CAACvB,WAAW,CAACsB,SAAD,CAAhB,EAA6B;AACzBtB,UAAAA,WAAW,CAACsB,SAAD,CAAX,GAAyB;AAACE,YAAAA,IAAI,EAAE;AAAP,WAAzB;AACH;;AAED,YAAI,MAAI,CAACjC,KAAL,CAAWiB,QAAX,CAAoBC,OAApB,CAA4BgB,IAA5B,CAAiC,UAAAd,MAAM;AAAA,iBAAIA,MAAM,CAACC,EAAP,KAAcO,KAAK,CAACO,QAAxB;AAAA,SAAvC,CAAJ,EAA8E;AAC1E1B,UAAAA,WAAW,CAACsB,SAAD,CAAX,CAAuBE,IAAvB,CAA4BG,IAA5B,CAAiCpB,MAAM,CAACY,KAAK,CAACO,QAAP,CAAvC;AACH,SAFD,MAGK;AACD1B,UAAAA,WAAW,CAACsB,SAAD,CAAX,CAAuBE,IAAvB,CAA4BG,IAA5B,CAAiC;AAACd,YAAAA,GAAG,EAAE,CAAC,CAAP;AAAUC,YAAAA,KAAK,EAAE;AAAjB,WAAjC;AACH;AACJ,OAbD;AAgBA,WAAKvB,KAAL,CAAWiB,QAAX,CAAoBoB,aAApB,CAAkCC,MAAlC,CAAyCnB,OAAzC,CAAiD,UAAAoB,IAAI,EAAI;AACrD,YAAI,CAAC9B,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAhB,EAA6B;AACzB/B,UAAAA,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAX,GAAyB;AAACP,YAAAA,IAAI,EAAE;AAAP,WAAzB;AACH;;AACDxB,QAAAA,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAX,CAAuBP,IAAvB,CAA4BG,IAA5B,CAAiC;AAC7Bd,UAAAA,GAAG,EAAKiB,IAAI,CAACC,IAAV,YAD0B;AAE7BjB,UAAAA,KAAK,EAAE;AAFsB,SAAjC;AAIH,OARD;AASA,WAAKvB,KAAL,CAAWiB,QAAX,CAAoBoB,aAApB,CAAkCI,OAAlC,CAA0CtB,OAA1C,CAAkD,UAAAoB,IAAI,EAAI;AACtD,YAAI,CAAC9B,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAhB,EAA6B;AACzB/B,UAAAA,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAX,GAAyB;AAACP,YAAAA,IAAI,EAAE;AAAP,WAAzB;AACH;;AACDxB,QAAAA,WAAW,CAAC8B,IAAI,CAACC,IAAN,CAAX,CAAuBP,IAAvB,CAA4BG,IAA5B,CAAiC;AAC7Bd,UAAAA,GAAG,EAAKiB,IAAI,CAACC,IAAV,aAD0B;AAE7BjB,UAAAA,KAAK,EAAE;AAFsB,SAAjC;AAIH,OARD;AAWA,WAAKvB,KAAL,CAAWiB,QAAX,CAAoByB,QAApB,CAA6BvB,OAA7B,CAAqC,UAAAwB,OAAO,EAAI;AAC5C,YAAMC,UAAU,GAAGD,OAAO,CAACH,IAAR,CAAaK,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAnB;;AACA,YAAI,CAACpC,WAAW,CAACmC,UAAD,CAAhB,EAA8B;AAC1BnC,UAAAA,WAAW,CAACmC,UAAD,CAAX,GAA0B;AAACX,YAAAA,IAAI,EAAE;AAAP,WAA1B;AACH;;AACDxB,QAAAA,WAAW,CAACmC,UAAD,CAAX,CAAwBX,IAAxB,CAA6BG,IAA7B,CAAkC;AAC9Bb,UAAAA,KAAK,EAAE;AADuB,SAAlC;AAGH,OARD;AAUA,aAAOd,WAAP;AACH;;;6BAEQ;AAAA;;AACL,aACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEpB,MAAM,CAACyD,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEzD,MAAM,CAAC0D,gBAAxB;AACI,QAAA,OAAO,EAAI,KAAK/C,KAAL,CAAWiB,QAAX,CAAoB+B,MAApB,CAA2BC,GAA3B,CAA+B,UAAAC,KAAK,EAAI;AAC/C,iBAAO;AACHC,YAAAA,KAAK,EAAED,KAAK,CAACE,IADV;AAEHC,YAAAA,KAAK,EAAEH,KAAK,CAAC7B;AAFV,WAAP;AAIH,SALU,CADf;AAOI,QAAA,aAAa,EAAI,KAAKrB,KAAL,CAAW8B,aAAX,CAAyBT,EAP9C;AAQI,QAAA,aAAa,EAAI,uBAAAQ,OAAO,EAAI;AACxB,cAAIA,OAAO,KAAK,IAAhB,EAAsB;AAClB,YAAA,MAAI,CAACf,QAAL,CAAc;AAACwC,cAAAA,aAAa,EAAE,MAAI,CAACtD,KAAL,CAAWiB,QAAX,CAAoB+B,MAApB,CAA2Bd,IAA3B,CAAgC,UAAAgB,KAAK;AAAA,uBAAIA,KAAK,CAAC7B,EAAN,KAAaQ,OAAjB;AAAA,eAArC;AAAhB,aAAd;AACH;AACJ,SAZL;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAeI,oBAAC,UAAD;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC7B,KAAL,CAAWY,UAAX,CAAsB2C,QAAtB,CAA+B,aAA/B,EAA8C;AACzDtC,YAAAA,QAAQ,EAAE,MAAI,CAACjB,KAAL,CAAWiB,QADoC;AAEzDuC,YAAAA,QAAQ,EAAE,kBAAAR,MAAM,EAAI;AAChBS,cAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACH;AAJwD,WAA9C,CAAN;AAAA,SADb;AAAA;AAAA;AAAA;AAAA;AAAA,QAfJ,CADJ,EAyBI,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE3D,MAAM,CAACsE,SAA5B;AACI,QAAA,UAAU,EAAI,IADlB;AAEI,QAAA,aAAa,EAAI,IAFrB;AAGI,QAAA,UAAU,EAAI,IAHlB;AAII,QAAA,WAAW,EAAG,WAJlB;AAKI,QAAA,WAAW,EAAI,KAAKxD,KAAL,CAAWM,WAL9B;AAMI,QAAA,UAAU,EAAI,oBAAAmD,GAAG,EAAI;AACjB,UAAA,MAAI,CAAC5D,KAAL,CAAWY,UAAX,CAAsB2C,QAAtB,CAA+B,KAA/B,EAAsC;AAClCM,YAAAA,QAAQ,EAAE;AAAA,qBAAM,MAAI,CAAC9C,WAAL,EAAN;AAAA,aADwB;AAElC+C,YAAAA,YAAY,EAAE5E,UAAU,CAAC;AAACsD,cAAAA,IAAI,EAAEoB,GAAG,CAAChB;AAAX,aAAD,CAFU;AAGlCd,YAAAA,aAAa,EAAE,MAAI,CAAC9B,KAAL,CAAW8B,aAHQ;AAIlCb,YAAAA,QAAQ,EAAE,MAAI,CAACjB,KAAL,CAAWiB;AAJa,WAAtC;AAMH,SAbL;AAcI,QAAA,qBAAqB,EAAI,+BAAA8C,MAAM,EAAI;AAC/B,UAAA,MAAI,CAAC5D,KAAL,CAAWQ,WAAX,GAAyB,IAAIT,IAAJ,CAAS6D,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAnB,EAAyBD,MAAM,CAAC,CAAD,CAAN,CAAUE,KAAV,GAAkB,CAA3C,EAA8C,CAA9C,CAAzB;AACH,SAhBL;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBJ,EA2CI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE5E,MAAM,CAAC6E,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAG,gBADZ;AAEI,QAAA,QAAQ,EAAI,KAAK/D,KAAL,CAAWK,oBAF3B;AAGI,QAAA,OAAO,EAAI,mBAAM;AACb,UAAA,MAAI,CAACR,KAAL,CAAWY,UAAX,CAAsB2C,QAAtB,CAA+B,eAA/B,EAAgD;AAC5CtC,YAAAA,QAAQ,EAAE,MAAI,CAACjB,KAAL,CAAWiB,QADuB;AAE5CiC,YAAAA,KAAK,EAAE,MAAI,CAAClD,KAAL,CAAW8B,aAF0B;AAG5CU,YAAAA,IAAI,EAAE,MAAI,CAACrC,KAAL,CAAWQ;AAH2B,WAAhD;AAKH,SATL;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA3CJ,CADJ;AA2DH;;;;EArJmB5B,KAAK,CAACoF,S,WACnBC,S,GAAY;AACftC,EAAAA,aAAa,EAAEjC,SAAS,CAACwE,UAAV,CAAqB1E,KAArB,EAA4B2E,UAD5B;AAEfrD,EAAAA,QAAQ,EAAEpB,SAAS,CAACwE,UAAV,CAAqBzE,QAArB,EAA+B0E;AAF1B,C;AAuJvB,eAAevE,SAAf","sourcesContent":["import React from 'react';\nimport {randomColor, toDateString, toDateTime, toMonthString, blackColor} from \"../util\";\nimport Styles from \"../styles\";\nimport {CalendarList} from \"react-native-calendars\";\nimport _ from \"lodash\";\nimport Dropdown from \"../components/Dropdown\";\nimport AppContainer from \"../components/AppContainer\";\nimport MoreButton from \"../components/MoreButton\";\nimport {Venue} from \"../objects\";\nimport Database from \"../Database\";\nimport PropTypes from 'prop-types';\nimport {Button, View, Alert} from 'react-native';\nimport {withMappedNavigationProps} from \"react-navigation-props-mapper\";\n\n@withMappedNavigationProps()\nclass MonthView extends React.Component {\n    static propTypes = {\n        selectedVenue: PropTypes.instanceOf(Venue).isRequired,\n        database: PropTypes.instanceOf(Database).isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        let currentDate = new Date();\n        this.state = {\n            selectedMonth: currentDate.getMonth(),\n            selectedYear: currentDate.getFullYear(),\n            disableSendingEmails: false,\n            markedDates: this._generateMarkedDates(),\n            activeMonth: {}\n        };\n\n        // Refreshes the monthly view whenever the user goes \"back\" to it from the day view\n        this.props.navigation.addListener('didFocus', () => {\n            this.setState({\n                markedDates: this._generateMarkedDates()\n            });\n            this.forceUpdate();\n        });\n    }\n\n    _generateMarkedDates() {\n\n        // Generate marked dates for events\n        let colors = {};\n        this.props.database.clients.forEach(client => {\n            colors[client.id] = {\n                key: client.id,\n                color: randomColor(client.id).hex\n            };\n        });\n\n        let thisVenuesEvents = this.props.database.events.filter(event => event.venueID === this.props.selectedVenue.id);\n        let markedDates = {};\n        thisVenuesEvents.forEach(event => {\n            let eventDate = toDateString(event.start);\n\n            if (!markedDates[eventDate]) {\n                markedDates[eventDate] = {dots: []};\n            }\n\n            if (this.props.database.clients.find(client => client.id === event.clientID)) {\n                markedDates[eventDate].dots.push(colors[event.clientID]);\n            }\n            else {\n                markedDates[eventDate].dots.push({key: -1, color: \"#000000\"});\n            }\n        });\n\n        // Generate marked dates for football games\n        this.props.database.footballGames.auburn.forEach(game => {\n            if (!markedDates[game.date]) {\n                markedDates[game.date] = {dots: []};\n            }\n            markedDates[game.date].dots.push({\n                key: `${game.date}-auburn`,\n                color: \"#8B4513\"\n            });\n        });\n        this.props.database.footballGames.alabama.forEach(game => {\n            if (!markedDates[game.date]) {\n                markedDates[game.date] = {dots: []};\n            }\n            markedDates[game.date].dots.push({\n                key: `${game.date}-alabama`,\n                color: \"#8B4513\"\n            });\n        });\n\n        // Generate marked dates for holidays\n        this.props.database.holidays.forEach(holiday => {\n            const dateString = holiday.date.split(' ')[0];\n            if (!markedDates[dateString]) {\n                markedDates[dateString] = {dots: []};\n            }\n            markedDates[dateString].dots.push({\n                color: \"#556B2F\"\n            });\n        });\n\n        return markedDates;\n    }\n\n    render() {\n        return (\n            <AppContainer>\n                <View style={Styles.calendarHeader}>\n                    <Dropdown style={Styles.calendarDropdown}\n                        options = {this.props.database.venues.map(venue => {\n                            return {\n                                label: venue.name,\n                                value: venue.id\n                            };\n                        })}\n                        selectedValue = {this.props.selectedVenue.id}\n                        onValueChange = {venueID => {\n                            if (venueID !== null) {\n                                this.setState({selectedValue: this.props.database.venues.find(venue => venue.id === venueID)});\n                            }\n                        }}\n                    />\n                    <MoreButton\n                        onPress={() => this.props.navigation.navigate(\"VenueManage\", {\n                            database: this.props.database,\n                            onReturn: venues => {\n                                console.log(venues);\n                            }\n                        })}\n                    />\n                </View>\n                <CalendarList style={Styles.monthView}\n                    horizontal = {true}\n                    pagingEnabled = {true}\n                    hideArrows = {true}\n                    markingType = \"multi-dot\"\n                    markedDates = {this.state.markedDates}\n                    onDayPress = {day => {\n                        this.props.navigation.navigate(\"Day\", {\n                            onGoBack: () => this.forceUpdate(),\n                            selectedDate: toDateTime({date: day.dateString}),\n                            selectedVenue: this.props.selectedVenue,\n                            database: this.props.database\n                        });\n                    }}\n                    onVisibleMonthsChange = {months => {\n                        this.state.activeMonth = new Date(months[0].year, months[0].month - 1, 1);\n                    }}\n                />\n                <View style={Styles.buttonContainer}>\n                    <Button\n                        title = \"Generate Forms\"\n                        disabled = {this.state.disableSendingEmails}\n                        onPress = {() => {\n                            this.props.navigation.navigate(\"Documentation\", {\n                                database: this.props.database,\n                                venue: this.props.selectedVenue,\n                                date: this.state.activeMonth\n                            });\n                        }}\n                    />\n                </View>\n            </AppContainer>\n        );\n    }\n}\n\nexport default MonthView;"]},"metadata":{},"sourceType":"module"}