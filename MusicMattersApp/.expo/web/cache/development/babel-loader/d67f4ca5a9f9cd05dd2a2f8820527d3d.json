{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/dennis/Desktop/music-matters-bookings-system-working/node_modules/react-native-modal-datetime-picker/node_modules/react-native-modal/src/index.js\";\nimport React, { Component } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport PropTypes from \"prop-types\";\nimport * as animatable from \"react-native-animatable\";\nimport { initializeAnimations, buildAnimations } from \"./utils\";\nimport styles from \"./index.style.js\";\ninitializeAnimations();\n\nvar ReactNativeModal = function (_Component) {\n  _inherits(ReactNativeModal, _Component);\n\n  function ReactNativeModal(props) {\n    var _this;\n\n    _classCallCheck(this, ReactNativeModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactNativeModal).call(this, props));\n    _this.state = {\n      showContent: true,\n      isVisible: false,\n      deviceWidth: Dimensions.get(\"window\").width,\n      deviceHeight: Dimensions.get(\"window\").height,\n      isSwipeable: _this.props.swipeDirection ? true : false,\n      pan: null\n    };\n    _this.isTransitioning = false;\n    _this.inSwipeClosingState = false;\n\n    _this.buildPanResponder = function () {\n      var animEvt = null;\n\n      if (_this.props.swipeDirection === \"right\" || _this.props.swipeDirection === \"left\") {\n        animEvt = Animated.event([null, {\n          dx: _this.state.pan.x\n        }]);\n      } else {\n        animEvt = Animated.event([null, {\n          dy: _this.state.pan.y\n        }]);\n      }\n\n      _this.panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n          if (!_this.props.propagateSwipe) {\n            var shouldSetPanResponder = Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n\n            if (shouldSetPanResponder && _this.props.onSwipeStart) {\n              _this.props.onSwipeStart();\n            }\n\n            return shouldSetPanResponder;\n          }\n        },\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n          if (_this.props.scrollTo && _this.props.scrollOffset > 0) {\n            return false;\n          }\n\n          if (_this.props.onSwipeStart) {\n            _this.props.onSwipeStart();\n          }\n\n          return true;\n        },\n        onPanResponderMove: function onPanResponderMove(evt, gestureState) {\n          var deviceWidth = _this.props.deviceWidth || _this.state.deviceWidth;\n\n          var accDistance = _this.getAccDistancePerDirection(gestureState);\n\n          var newOpacityFactor = 1 - accDistance / deviceWidth;\n\n          if (_this.isSwipeDirectionAllowed(gestureState)) {\n            _this.backdropRef && _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity * newOpacityFactor\n            });\n            animEvt(evt, gestureState);\n\n            if (_this.props.onSwipeMove) {\n              _this.props.onSwipeMove(newOpacityFactor);\n            }\n          } else {\n            if (_this.props.scrollTo) {\n              var offsetY = -gestureState.dy;\n\n              if (offsetY > _this.props.scrollOffsetMax) {\n                offsetY -= (offsetY - _this.props.scrollOffsetMax) / 2;\n              }\n\n              _this.props.scrollTo({\n                y: offsetY,\n                animated: false\n              });\n            }\n          }\n        },\n        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {\n          var accDistance = _this.getAccDistancePerDirection(gestureState);\n\n          if (accDistance > _this.props.swipeThreshold) {\n            if (_this.props.onSwipeComplete) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipeComplete();\n\n              return;\n            }\n\n            if (_this.props.onSwipe) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipe();\n\n              return;\n            }\n          }\n\n          if (_this.props.onSwipeCancel) {\n            _this.props.onSwipeCancel();\n          }\n\n          if (_this.backdropRef) {\n            _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity\n            }, _this.props.backdropTransitionInTiming);\n          }\n\n          Animated.spring(_this.state.pan, {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            bounciness: 0\n          }).start();\n\n          if (_this.props.scrollOffset > _this.props.scrollOffsetMax) {\n            _this.props.scrollTo({\n              y: _this.props.scrollOffsetMax,\n              animated: true\n            });\n          }\n        }\n      });\n    };\n\n    _this.getAccDistancePerDirection = function (gestureState) {\n      switch (_this.props.swipeDirection) {\n        case \"up\":\n          return -gestureState.dy;\n\n        case \"down\":\n          return gestureState.dy;\n\n        case \"right\":\n          return gestureState.dx;\n\n        case \"left\":\n          return -gestureState.dx;\n\n        default:\n          return 0;\n      }\n    };\n\n    _this.isSwipeDirectionAllowed = function (_ref) {\n      var dy = _ref.dy,\n          dx = _ref.dx;\n      var draggedDown = dy > 0;\n      var draggedUp = dy < 0;\n      var draggedLeft = dx < 0;\n      var draggedRight = dx > 0;\n\n      if (_this.props.swipeDirection === \"up\" && draggedUp) {\n        return true;\n      } else if (_this.props.swipeDirection === \"down\" && draggedDown) {\n        return true;\n      } else if (_this.props.swipeDirection === \"right\" && draggedRight) {\n        return true;\n      } else if (_this.props.swipeDirection === \"left\" && draggedLeft) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleDimensionsUpdate = function (dimensionsUpdate) {\n      if (!_this.props.deviceHeight && !_this.props.deviceWidth) {\n        var deviceWidth = Dimensions.get(\"window\").width;\n        var deviceHeight = Dimensions.get(\"window\").height;\n\n        if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {\n          _this.setState({\n            deviceWidth: deviceWidth,\n            deviceHeight: deviceHeight\n          });\n        }\n      }\n    };\n\n    _this.open = function () {\n      if (_this.isTransitioning) return;\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: _this.props.backdropOpacity\n        }, _this.props.backdropTransitionInTiming);\n      }\n\n      if (_this.state.isSwipeable) {\n        _this.state.pan.setValue({\n          x: 0,\n          y: 0\n        });\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillShow && _this.props.onModalWillShow();\n\n        _this.contentRef[_this.animationIn](_this.props.animationInTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (!_this.props.isVisible) {\n            _this.close();\n          } else {\n            _this.props.onModalShow();\n          }\n        });\n      }\n    };\n\n    _this.close = function () {\n      if (_this.isTransitioning) return;\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: 0\n        }, _this.props.backdropTransitionOutTiming);\n      }\n\n      var animationOut = _this.animationOut;\n\n      if (_this.inSwipeClosingState) {\n        _this.inSwipeClosingState = false;\n\n        if (_this.props.swipeDirection === \"up\") {\n          animationOut = \"slideOutUp\";\n        } else if (_this.props.swipeDirection === \"down\") {\n          animationOut = \"slideOutDown\";\n        } else if (_this.props.swipeDirection === \"right\") {\n          animationOut = \"slideOutRight\";\n        } else if (_this.props.swipeDirection === \"left\") {\n          animationOut = \"slideOutLeft\";\n        }\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillHide && _this.props.onModalWillHide();\n\n        _this.contentRef[animationOut](_this.props.animationOutTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (_this.props.isVisible) {\n            _this.open();\n          } else {\n            _this.setState({\n              showContent: false\n            }, function () {\n              _this.setState({\n                isVisible: false\n              });\n            });\n\n            _this.props.onModalHide();\n          }\n        });\n      }\n    };\n\n    var _buildAnimations = buildAnimations(props),\n        animationIn = _buildAnimations.animationIn,\n        _animationOut = _buildAnimations.animationOut;\n\n    _this.animationIn = animationIn;\n    _this.animationOut = _animationOut;\n\n    if (_this.state.isSwipeable) {\n      _this.state = _objectSpread({}, _this.state, {\n        pan: new Animated.ValueXY()\n      });\n\n      _this.buildPanResponder();\n    }\n\n    if (_this.props.isVisible) {\n      _this.state = _objectSpread({}, _this.state, {\n        isVisible: true,\n        showContent: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(ReactNativeModal, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!this.state.isVisible && nextProps.isVisible) {\n        this.setState({\n          isVisible: true,\n          showContent: true\n        });\n      }\n\n      if (this.props.animationIn !== nextProps.animationIn || this.props.animationOut !== nextProps.animationOut) {\n        var _buildAnimations2 = buildAnimations(nextProps),\n            animationIn = _buildAnimations2.animationIn,\n            animationOut = _buildAnimations2.animationOut;\n\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n      }\n\n      if (this.props.backdropOpacity !== nextProps.backdropOpacity && this.backdropRef) {\n        this.backdropRef.transitionTo({\n          opacity: nextProps.backdropOpacity\n        }, this.props.backdropTransitionInTiming);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onSwipe) {\n        console.warn('`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n      }\n\n      if (this.state.isVisible) {\n        this.open();\n      }\n\n      DeviceEventEmitter.addListener(\"didUpdateDimensions\", this.handleDimensionsUpdate);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      DeviceEventEmitter.removeListener(\"didUpdateDimensions\", this.handleDimensionsUpdate);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.isVisible && !prevProps.isVisible) {\n        this.open();\n      } else if (!this.props.isVisible && prevProps.isVisible) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          animationIn = _this$props.animationIn,\n          animationInTiming = _this$props.animationInTiming,\n          animationOut = _this$props.animationOut,\n          animationOutTiming = _this$props.animationOutTiming,\n          avoidKeyboard = _this$props.avoidKeyboard,\n          hasBackdrop = _this$props.hasBackdrop,\n          backdropColor = _this$props.backdropColor,\n          backdropOpacity = _this$props.backdropOpacity,\n          backdropTransitionInTiming = _this$props.backdropTransitionInTiming,\n          backdropTransitionOutTiming = _this$props.backdropTransitionOutTiming,\n          children = _this$props.children,\n          deviceHeightProp = _this$props.deviceHeight,\n          deviceWidthProp = _this$props.deviceWidth,\n          isVisible = _this$props.isVisible,\n          onModalShow = _this$props.onModalShow,\n          onBackdropPress = _this$props.onBackdropPress,\n          onBackButtonPress = _this$props.onBackButtonPress,\n          useNativeDriver = _this$props.useNativeDriver,\n          propagateSwipe = _this$props.propagateSwipe,\n          style = _this$props.style,\n          otherProps = _objectWithoutProperties(_this$props, [\"animationIn\", \"animationInTiming\", \"animationOut\", \"animationOutTiming\", \"avoidKeyboard\", \"hasBackdrop\", \"backdropColor\", \"backdropOpacity\", \"backdropTransitionInTiming\", \"backdropTransitionOutTiming\", \"children\", \"deviceHeight\", \"deviceWidth\", \"isVisible\", \"onModalShow\", \"onBackdropPress\", \"onBackButtonPress\", \"useNativeDriver\", \"propagateSwipe\", \"style\"]);\n\n      var deviceWidth = deviceWidthProp || this.state.deviceWidth;\n      var deviceHeight = deviceHeightProp || this.state.deviceHeight;\n      var computedStyle = [{\n        margin: deviceWidth * 0.05,\n        transform: [{\n          translateY: 0\n        }]\n      }, styles.content, style];\n      var panHandlers = {};\n      var panPosition = {};\n\n      if (this.state.isSwipeable) {\n        panHandlers = _objectSpread({}, this.panResponder.panHandlers);\n\n        if (useNativeDriver) {\n          panPosition = {\n            transform: this.state.pan.getTranslateTransform()\n          };\n        } else {\n          panPosition = this.state.pan.getLayout();\n        }\n      }\n\n      var _children = this.props.hideModalContentWhileAnimating && this.props.useNativeDriver && !this.state.showContent ? React.createElement(animatable.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        }\n      }) : children;\n\n      var containerView = React.createElement(animatable.View, _extends({}, panHandlers, {\n        ref: function ref(_ref2) {\n          return _this2.contentRef = _ref2;\n        },\n        style: [panPosition, computedStyle],\n        pointerEvents: \"box-none\",\n        useNativeDriver: useNativeDriver\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        }\n      }), _children);\n      return React.createElement(Modal, _extends({\n        transparent: true,\n        animationType: \"none\",\n        visible: this.state.isVisible,\n        onRequestClose: onBackButtonPress\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        }\n      }), hasBackdrop && React.createElement(TouchableWithoutFeedback, {\n        onPress: onBackdropPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        }\n      }, React.createElement(animatable.View, {\n        ref: function ref(_ref3) {\n          return _this2.backdropRef = _ref3;\n        },\n        useNativeDriver: true,\n        style: [styles.backdrop, {\n          backgroundColor: this.state.showContent ? backdropColor : \"transparent\",\n          width: deviceWidth,\n          height: deviceHeight\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        }\n      })), avoidKeyboard && React.createElement(KeyboardAvoidingView, {\n        behavior: Platform.OS === \"ios\" ? \"padding\" : null,\n        pointerEvents: \"box-none\",\n        style: computedStyle.concat([{\n          margin: 0\n        }]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        }\n      }, containerView), !avoidKeyboard && containerView);\n    }\n  }]);\n\n  return ReactNativeModal;\n}(Component);\n\nReactNativeModal.propTypes = {\n  animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationInTiming: PropTypes.number,\n  animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationOutTiming: PropTypes.number,\n  avoidKeyboard: PropTypes.bool,\n  hasBackdrop: PropTypes.bool,\n  backdropColor: PropTypes.string,\n  backdropOpacity: PropTypes.number,\n  backdropTransitionInTiming: PropTypes.number,\n  backdropTransitionOutTiming: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  deviceHeight: PropTypes.number,\n  deviceWidth: PropTypes.number,\n  isVisible: PropTypes.bool.isRequired,\n  hideModalContentWhileAnimating: PropTypes.bool,\n  propagateSwipe: PropTypes.bool,\n  onModalShow: PropTypes.func,\n  onModalWillShow: PropTypes.func,\n  onModalHide: PropTypes.func,\n  onModalWillHide: PropTypes.func,\n  onBackButtonPress: PropTypes.func,\n  onBackdropPress: PropTypes.func,\n  onSwipeStart: PropTypes.func,\n  onSwipeMove: PropTypes.func,\n  onSwipeComplete: PropTypes.func,\n  onSwipeCancel: PropTypes.func,\n  swipeThreshold: PropTypes.number,\n  swipeDirection: PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"]),\n  useNativeDriver: PropTypes.bool,\n  style: PropTypes.any,\n  scrollTo: PropTypes.func,\n  scrollOffset: PropTypes.number,\n  scrollOffsetMax: PropTypes.number,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf([\"portrait\", \"portrait-upside-down\", \"landscape\", \"landscape-left\", \"landscape-right\"]))\n};\nReactNativeModal.defaultProps = {\n  animationIn: \"slideInUp\",\n  animationInTiming: 300,\n  animationOut: \"slideOutDown\",\n  animationOutTiming: 300,\n  avoidKeyboard: false,\n  hasBackdrop: true,\n  backdropColor: \"black\",\n  backdropOpacity: 0.7,\n  backdropTransitionInTiming: 300,\n  backdropTransitionOutTiming: 300,\n  onModalShow: function onModalShow() {\n    return null;\n  },\n  onModalWillShow: function onModalWillShow() {\n    return null;\n  },\n  deviceHeight: null,\n  deviceWidth: null,\n  onModalHide: function onModalHide() {\n    return null;\n  },\n  onModalWillHide: function onModalWillHide() {\n    return null;\n  },\n  isVisible: false,\n  hideModalContentWhileAnimating: false,\n  propagateSwipe: PropTypes.false,\n  onBackdropPress: function onBackdropPress() {\n    return null;\n  },\n  onBackButtonPress: function onBackButtonPress() {\n    return null;\n  },\n  swipeThreshold: 100,\n  useNativeDriver: false,\n  scrollTo: null,\n  scrollOffset: 0,\n  scrollOffsetMax: 0,\n  supportedOrientations: [\"portrait\", \"landscape\"]\n};\nexport default ReactNativeModal;\nexport { ReactNativeModal };","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/node_modules/react-native-modal-datetime-picker/node_modules/react-native-modal/src/index.js"],"names":["React","Component","PropTypes","animatable","initializeAnimations","buildAnimations","styles","ReactNativeModal","props","state","showContent","isVisible","deviceWidth","Dimensions","get","width","deviceHeight","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","buildPanResponder","animEvt","Animated","event","dx","x","dy","y","panResponder","PanResponder","create","onMoveShouldSetPanResponder","evt","gestureState","propagateSwipe","shouldSetPanResponder","Math","abs","onSwipeStart","onStartShouldSetPanResponder","scrollTo","scrollOffset","onPanResponderMove","accDistance","getAccDistancePerDirection","newOpacityFactor","isSwipeDirectionAllowed","backdropRef","transitionTo","opacity","backdropOpacity","onSwipeMove","offsetY","scrollOffsetMax","animated","onPanResponderRelease","swipeThreshold","onSwipeComplete","onSwipe","onSwipeCancel","backdropTransitionInTiming","spring","toValue","bounciness","start","draggedDown","draggedUp","draggedLeft","draggedRight","handleDimensionsUpdate","dimensionsUpdate","setState","open","setValue","contentRef","onModalWillShow","animationIn","animationInTiming","then","close","onModalShow","backdropTransitionOutTiming","animationOut","onModalWillHide","animationOutTiming","onModalHide","ValueXY","nextProps","console","warn","DeviceEventEmitter","addListener","removeListener","prevProps","prevState","avoidKeyboard","hasBackdrop","backdropColor","children","deviceHeightProp","deviceWidthProp","onBackdropPress","onBackButtonPress","useNativeDriver","style","otherProps","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","hideModalContentWhileAnimating","containerView","ref","backdrop","backgroundColor","Platform","OS","concat","propTypes","oneOfType","string","object","number","bool","node","isRequired","func","oneOf","any","supportedOrientations","arrayOf","defaultProps","false"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Animated,\n  DeviceEventEmitter,\n  Dimensions,\n  KeyboardAvoidingView,\n  Modal,\n  PanResponder,\n  Platform,\n  TouchableWithoutFeedback\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport * as animatable from \"react-native-animatable\";\nimport { initializeAnimations, buildAnimations } from \"./utils\";\n\nimport styles from \"./index.style.js\";\n\n// Override default react-native-animatable animations\ninitializeAnimations();\n\nclass ReactNativeModal extends Component {\n  static propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    hasBackdrop: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    children: PropTypes.node.isRequired,\n    deviceHeight: PropTypes.number,\n    deviceWidth: PropTypes.number,\n    isVisible: PropTypes.bool.isRequired,\n    hideModalContentWhileAnimating: PropTypes.bool,\n    propagateSwipe: PropTypes.bool,\n    onModalShow: PropTypes.func,\n    onModalWillShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onModalWillHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    onSwipeStart: PropTypes.func,\n    onSwipeMove: PropTypes.func,\n    onSwipeComplete: PropTypes.func,\n    onSwipeCancel: PropTypes.func,\n    swipeThreshold: PropTypes.number,\n    swipeDirection: PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"]),\n    useNativeDriver: PropTypes.bool,\n    style: PropTypes.any,\n    scrollTo: PropTypes.func,\n    scrollOffset: PropTypes.number,\n    scrollOffsetMax: PropTypes.number,\n    supportedOrientations: PropTypes.arrayOf(\n      PropTypes.oneOf([\n        \"portrait\",\n        \"portrait-upside-down\",\n        \"landscape\",\n        \"landscape-left\",\n        \"landscape-right\"\n      ])\n    )\n  };\n\n  static defaultProps = {\n    animationIn: \"slideInUp\",\n    animationInTiming: 300,\n    animationOut: \"slideOutDown\",\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    hasBackdrop: true,\n    backdropColor: \"black\",\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    onModalShow: () => null,\n    onModalWillShow: () => null,\n    deviceHeight: null,\n    deviceWidth: null,\n    onModalHide: () => null,\n    onModalWillHide: () => null,\n    isVisible: false,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: PropTypes.false,\n    onBackdropPress: () => null,\n    onBackButtonPress: () => null,\n    swipeThreshold: 100,\n    useNativeDriver: false,\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    supportedOrientations: [\"portrait\", \"landscape\"]\n  };\n\n  // We use an internal state for keeping track of the modal visibility: this allows us to keep\n  // the modal visibile during the exit animation, even if the user has already change the\n  // isVisible prop to false.\n  // We store in the state the device width and height so that we can update the modal on\n  // device rotation.\n  state = {\n    showContent: true,\n    isVisible: false,\n    deviceWidth: Dimensions.get(\"window\").width,\n    deviceHeight: Dimensions.get(\"window\").height,\n    isSwipeable: this.props.swipeDirection ? true : false,\n    pan: null\n  };\n\n  isTransitioning = false;\n  inSwipeClosingState = false;\n\n  constructor(props) {\n    super(props);\n    const { animationIn, animationOut } = buildAnimations(props);\n    this.animationIn = animationIn;\n    this.animationOut = animationOut;\n    if (this.state.isSwipeable) {\n      this.state = { ...this.state, pan: new Animated.ValueXY() };\n      this.buildPanResponder();\n    }\n    if (this.props.isVisible) {\n      this.state = {\n        ...this.state,\n        isVisible: true,\n        showContent: true\n      };\n    }\n  }\n\n  // TODO: Stop using componentWillReceiveProps\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.state.isVisible && nextProps.isVisible) {\n      this.setState({ isVisible: true, showContent: true });\n    }\n    if (\n      this.props.animationIn !== nextProps.animationIn ||\n      this.props.animationOut !== nextProps.animationOut\n    ) {\n      const { animationIn, animationOut } = buildAnimations(nextProps);\n      this.animationIn = animationIn;\n      this.animationOut = animationOut;\n    }\n    if (\n      this.props.backdropOpacity !== nextProps.backdropOpacity &&\n      this.backdropRef\n    ) {\n      this.backdropRef.transitionTo(\n        { opacity: nextProps.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n  }\n\n  componentDidMount() {\n    // Show deprecation message\n    if (this.props.onSwipe) {\n      console.warn(\n        '`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.'\n      );\n    }\n    if (this.state.isVisible) {\n      this.open();\n    }\n    DeviceEventEmitter.addListener(\n      \"didUpdateDimensions\",\n      this.handleDimensionsUpdate\n    );\n  }\n\n  componentWillUnmount() {\n    DeviceEventEmitter.removeListener(\n      \"didUpdateDimensions\",\n      this.handleDimensionsUpdate\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // On modal open request, we slide the view up and fade in the backdrop\n    if (this.props.isVisible && !prevProps.isVisible) {\n      this.open();\n    } else if (!this.props.isVisible && prevProps.isVisible) {\n      // On modal close request, we slide the view down and fade out the backdrop\n      this.close();\n    }\n  }\n\n  buildPanResponder = () => {\n    let animEvt = null;\n\n    if (\n      this.props.swipeDirection === \"right\" ||\n      this.props.swipeDirection === \"left\"\n    ) {\n      animEvt = Animated.event([null, { dx: this.state.pan.x }]);\n    } else {\n      animEvt = Animated.event([null, { dy: this.state.pan.y }]);\n    }\n\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: (evt, gestureState) => {\n        // Use propagateSwipe to allow inner content to scroll. See PR:\n        // https://github.com/react-native-community/react-native-modal/pull/246\n        if (!this.props.propagateSwipe) {\n          // The number \"4\" is just a good tradeoff to make the panResponder\n          // work correctly even when the modal has touchable buttons.\n          // For reference:\n          // https://github.com/react-native-community/react-native-modal/pull/197\n          const shouldSetPanResponder =\n            Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n          if (shouldSetPanResponder && this.props.onSwipeStart) {\n            this.props.onSwipeStart();\n          }\n          return shouldSetPanResponder;\n        }\n      },\n      onStartShouldSetPanResponder: () => {\n        if (this.props.scrollTo && this.props.scrollOffset > 0) {\n          return false; // user needs to be able to scroll content back up\n        }\n        if (this.props.onSwipeStart) {\n          this.props.onSwipeStart();\n        }\n        return true;\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        // Dim the background while swiping the modal\n        const deviceWidth = this.props.deviceWidth || this.state.deviceWidth;\n        const accDistance = this.getAccDistancePerDirection(gestureState);\n        const newOpacityFactor = 1 - accDistance / deviceWidth;\n        if (this.isSwipeDirectionAllowed(gestureState)) {\n          this.backdropRef &&\n            this.backdropRef.transitionTo({\n              opacity: this.props.backdropOpacity * newOpacityFactor\n            });\n          animEvt(evt, gestureState);\n          if (this.props.onSwipeMove) {\n            this.props.onSwipeMove(newOpacityFactor);\n          }\n        } else {\n          if (this.props.scrollTo) {\n            let offsetY = -gestureState.dy;\n            if (offsetY > this.props.scrollOffsetMax) {\n              offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n            }\n            this.props.scrollTo({ y: offsetY, animated: false });\n          }\n        }\n      },\n      onPanResponderRelease: (evt, gestureState) => {\n        // Call the onSwipe prop if the threshold has been exceeded\n        const accDistance = this.getAccDistancePerDirection(gestureState);\n        if (accDistance > this.props.swipeThreshold) {\n          if (this.props.onSwipeComplete) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipeComplete();\n            return;\n          }\n          // Deprecated. Remove later.\n          if (this.props.onSwipe) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipe();\n            return;\n          }\n        }\n        //Reset backdrop opacity and modal position\n        if (this.props.onSwipeCancel) {\n          this.props.onSwipeCancel();\n        }\n        if (this.backdropRef) {\n          this.backdropRef.transitionTo(\n            { opacity: this.props.backdropOpacity },\n            this.props.backdropTransitionInTiming\n          );\n        }\n        Animated.spring(this.state.pan, {\n          toValue: { x: 0, y: 0 },\n          bounciness: 0\n        }).start();\n        if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n          this.props.scrollTo({\n            y: this.props.scrollOffsetMax,\n            animated: true\n          });\n        }\n      }\n    });\n  };\n\n  getAccDistancePerDirection = gestureState => {\n    switch (this.props.swipeDirection) {\n      case \"up\":\n        return -gestureState.dy;\n      case \"down\":\n        return gestureState.dy;\n      case \"right\":\n        return gestureState.dx;\n      case \"left\":\n        return -gestureState.dx;\n      default:\n        return 0;\n    }\n  };\n\n  isSwipeDirectionAllowed = ({ dy, dx }) => {\n    const draggedDown = dy > 0;\n    const draggedUp = dy < 0;\n    const draggedLeft = dx < 0;\n    const draggedRight = dx > 0;\n\n    if (this.props.swipeDirection === \"up\" && draggedUp) {\n      return true;\n    } else if (this.props.swipeDirection === \"down\" && draggedDown) {\n      return true;\n    } else if (this.props.swipeDirection === \"right\" && draggedRight) {\n      return true;\n    } else if (this.props.swipeDirection === \"left\" && draggedLeft) {\n      return true;\n    }\n    return false;\n  };\n\n  handleDimensionsUpdate = dimensionsUpdate => {\n    if (!this.props.deviceHeight && !this.props.deviceWidth) {\n      // Here we update the device dimensions in the state if the layout changed\n      // (triggering a render)\n      const deviceWidth = Dimensions.get(\"window\").width;\n      const deviceHeight = Dimensions.get(\"window\").height;\n      if (\n        deviceWidth !== this.state.deviceWidth ||\n        deviceHeight !== this.state.deviceHeight\n      ) {\n        this.setState({ deviceWidth, deviceHeight });\n      }\n    }\n  };\n\n  open = () => {\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: this.props.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n\n    // This is for resetting the pan position,otherwise the modal gets stuck\n    // at the last released position when you try to open it.\n    // TODO: Could certainly be improved - no idea for the moment.\n    if (this.state.isSwipeable) {\n      this.state.pan.setValue({ x: 0, y: 0 });\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillShow && this.props.onModalWillShow();\n      this.contentRef[this.animationIn](this.props.animationInTiming).then(\n        () => {\n          this.isTransitioning = false;\n          if (!this.props.isVisible) {\n            this.close();\n          } else {\n            this.props.onModalShow();\n          }\n        }\n      );\n    }\n  };\n\n  close = () => {\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: 0 },\n        this.props.backdropTransitionOutTiming\n      );\n    }\n\n    let animationOut = this.animationOut;\n\n    if (this.inSwipeClosingState) {\n      this.inSwipeClosingState = false;\n      if (this.props.swipeDirection === \"up\") {\n        animationOut = \"slideOutUp\";\n      } else if (this.props.swipeDirection === \"down\") {\n        animationOut = \"slideOutDown\";\n      } else if (this.props.swipeDirection === \"right\") {\n        animationOut = \"slideOutRight\";\n      } else if (this.props.swipeDirection === \"left\") {\n        animationOut = \"slideOutLeft\";\n      }\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillHide && this.props.onModalWillHide();\n      this.contentRef[animationOut](this.props.animationOutTiming).then(() => {\n        this.isTransitioning = false;\n        if (this.props.isVisible) {\n          this.open();\n        } else {\n          this.setState(\n            {\n              showContent: false\n            },\n            () => {\n              this.setState({\n                isVisible: false\n              });\n            }\n          );\n          this.props.onModalHide();\n        }\n      });\n    }\n  };\n\n  render() {\n    const {\n      animationIn,\n      animationInTiming,\n      animationOut,\n      animationOutTiming,\n      avoidKeyboard,\n      hasBackdrop,\n      backdropColor,\n      backdropOpacity,\n      backdropTransitionInTiming,\n      backdropTransitionOutTiming,\n      children,\n      deviceHeight: deviceHeightProp,\n      deviceWidth: deviceWidthProp,\n      isVisible,\n      onModalShow,\n      onBackdropPress,\n      onBackButtonPress,\n      useNativeDriver,\n      propagateSwipe,\n      style,\n      ...otherProps\n    } = this.props;\n    const deviceWidth = deviceWidthProp || this.state.deviceWidth;\n    const deviceHeight = deviceHeightProp || this.state.deviceHeight;\n\n    const computedStyle = [\n      { margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] },\n      styles.content,\n      style\n    ];\n\n    let panHandlers = {};\n    let panPosition = {};\n    if (this.state.isSwipeable) {\n      panHandlers = { ...this.panResponder.panHandlers };\n\n      if (useNativeDriver) {\n        panPosition = {\n          transform: this.state.pan.getTranslateTransform()\n        };\n      } else {\n        panPosition = this.state.pan.getLayout();\n      }\n    }\n\n    const _children =\n      this.props.hideModalContentWhileAnimating &&\n      this.props.useNativeDriver &&\n      !this.state.showContent ? (\n        <animatable.View />\n      ) : (\n        children\n      );\n    const containerView = (\n      <animatable.View\n        {...panHandlers}\n        ref={ref => (this.contentRef = ref)}\n        style={[panPosition, computedStyle]}\n        pointerEvents=\"box-none\"\n        useNativeDriver={useNativeDriver}\n        {...otherProps}\n      >\n        {_children}\n      </animatable.View>\n    );\n\n    return (\n      <Modal\n        transparent={true}\n        animationType={\"none\"}\n        visible={this.state.isVisible}\n        onRequestClose={onBackButtonPress}\n        {...otherProps}\n      >\n        {hasBackdrop && (\n          <TouchableWithoutFeedback onPress={onBackdropPress}>\n            <animatable.View\n              ref={ref => (this.backdropRef = ref)}\n              useNativeDriver={true}\n              style={[\n                styles.backdrop,\n                {\n                  backgroundColor: this.state.showContent\n                    ? backdropColor\n                    : \"transparent\",\n                  width: deviceWidth,\n                  height: deviceHeight\n                }\n              ]}\n            />\n          </TouchableWithoutFeedback>\n        )}\n\n        {avoidKeyboard && (\n          <KeyboardAvoidingView\n            behavior={Platform.OS === \"ios\" ? \"padding\" : null}\n            pointerEvents=\"box-none\"\n            style={computedStyle.concat([{ margin: 0 }])}\n          >\n            {containerView}\n          </KeyboardAvoidingView>\n        )}\n\n        {!avoidKeyboard && containerView}\n      </Modal>\n    );\n  }\n}\n\nexport default ReactNativeModal;\nexport { ReactNativeModal };\n"]},"metadata":{},"sourceType":"module"}