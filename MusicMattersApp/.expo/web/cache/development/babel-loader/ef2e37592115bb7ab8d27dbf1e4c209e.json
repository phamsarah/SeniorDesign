{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec,\n    _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dennis/Desktop/music-matters-bookings-system-working/views/ClientViews.js\",\n    _dec2,\n    _class3,\n    _class4,\n    _temp2;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Client } from \"../objects\";\nimport Database from \"../Database\";\nimport { withMappedNavigationProps } from \"react-navigation-props-mapper\";\nimport AppContainer from \"../components/AppContainer\";\nimport Styles from \"../styles\";\nimport styles from \"../styles\";\nimport _ from \"lodash\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Constants from 'expo-constants';\nexport var ManageClients = (_dec = withMappedNavigationProps(), _dec(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(ManageClients, _React$Component);\n\n  function ManageClients(props) {\n    _classCallCheck(this, ManageClients);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ManageClients).call(this, props));\n  }\n\n  _createClass(ManageClients, [{\n    key: \"_renderClient\",\n    value: function _renderClient(client) {\n      var _this = this;\n\n      return React.createElement(View, {\n        style: ClientStyles.entryContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }, React.createElement(Text, {\n        style: ClientStyles.entryName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        }\n      }, client.stageName), React.createElement(View, {\n        style: ClientStyles.entryButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        }\n      }, React.createElement(Button, {\n        title: \"\\u2699\\uFE0F\\uD83D\\uDD27\",\n        onPress: function onPress() {\n          return _this.props.navigation.navigate(\"Client\", {\n            client: client,\n            onSave: function onSave(client) {\n              _this.props.database.updateClient(client).catch(function (err) {\n                return console.log(err);\n              });\n\n              _this.forceUpdate();\n            },\n            onDelete: function onDelete(client) {\n              _this.props.database.removeClient(client).catch(function (err) {\n                return console.log(err);\n              });\n\n              _this.forceUpdate();\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(AppContainer, {\n        style: Styles.infoView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }\n      }, React.createElement(View, {\n        style: Styles.contentContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        }\n      }, React.createElement(FlatList, {\n        style: Styles.listContainer,\n        data: this.props.database.clients.map(function (client) {\n          return {\n            key: client.id,\n            data: client\n          };\n        }),\n        renderItem: function renderItem(data) {\n          return _this2._renderClient(data.item.data);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        }\n      })), React.createElement(View, {\n        style: Styles.buttonContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        }\n      }, React.createElement(Button, {\n        title: \"Add New Client\",\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Client\", {\n            onSave: function onSave(client) {\n              _this2.props.database.addClient(client);\n\n              _this2.forceUpdate();\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        }\n      })));\n    }\n  }]);\n\n  return ManageClients;\n}(React.Component), _class2.propTypes = {\n  onReturn: PropTypes.func,\n  database: PropTypes.instanceOf(Database).isRequired\n}, _temp)) || _class);\nexport var ClientView = (_dec2 = withMappedNavigationProps(), _dec2(_class3 = (_temp2 = _class4 = function (_React$Component2) {\n  _inherits(ClientView, _React$Component2);\n\n  function ClientView(props) {\n    var _this3;\n\n    _classCallCheck(this, ClientView);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ClientView).call(this, props));\n    var client = _this3.props.client || new Client();\n    _this3.isNew = !client.id;\n    _this3.state = {\n      stageName: client.stageName || \"\",\n      email: client.email || \"\",\n      performers: client.performers || [],\n      splitCheck: client.splitCheck || false,\n      bio: client.bio || \"\"\n    };\n    return _this3;\n  }\n\n  _createClass(ClientView, [{\n    key: \"_renderPerformer\",\n    value: function _renderPerformer(performerData) {\n      var _this4 = this;\n\n      var name = performerData.name;\n      var index = parseInt(performerData.key) - 1;\n      return React.createElement(PerformerEntry, {\n        name: name,\n        onSave: function onSave(newName) {\n          var performers = _this4.state.performers;\n          performers[index] = newName;\n\n          _this4.setState({\n            performers: performers\n          });\n        },\n        onDelete: function onDelete() {\n          var performers = _this4.state.performers;\n          performers.splice(index, 1);\n\n          _this4.setState({\n            performers: performers\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      });\n    }\n  }, {\n    key: \"_validateData\",\n    value: function _validateData() {\n      var emailRegex = new RegExp(\"^[\\\\w.]+@(\\\\w{2,}.)+\\\\w+$\");\n\n      if (this.state.stageName === \"\") {\n        alert(\"The client must have a stage name.\");\n      } else if (this.state.performers.length === 0) {\n        alert(\"There must be at least one performer.\");\n      } else if (this.state.email === \"\") {\n        alert(\"The client must have an email address.\");\n      } else if (!emailRegex.test(this.state.email)) {\n        alert(\"The given email address was not in the proper format.\");\n      } else {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(AppContainer, {\n        style: Styles.infoView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        }\n      }, React.createElement(View, {\n        style: Styles.contentContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        }\n      }, React.createElement(ScrollView, {\n        style: ClientStyles.scrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: \"padding\",\n        enabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        }\n      }, React.createElement(Text, {\n        style: Styles.infoTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        }\n      }, this.isNew ? \"Create New Client\" : \"Update Client\"), React.createElement(View, {\n        style: Styles.inputRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        }\n      }, React.createElement(Text, {\n        style: Styles.inputTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        }\n      }, \"Name\"), React.createElement(TextInput, {\n        style: Styles.inputBox,\n        value: this.state.stageName,\n        onChangeText: function onChangeText(value) {\n          return _this5.setState({\n            stageName: value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        }\n      })), React.createElement(View, {\n        style: Styles.inputRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        }\n      }, React.createElement(Text, {\n        style: Styles.inputTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        }\n      }, \"Email\"), React.createElement(TextInput, {\n        style: Styles.inputBox,\n        value: this.state.email,\n        onChangeText: function onChangeText(value) {\n          return _this5.setState({\n            email: value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        }\n      })), React.createElement(Text, {\n        style: ClientStyles.performerTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }, \"Performers\"), React.createElement(FlatList, {\n        style: Styles.listContainer,\n        data: this.state.performers.map(function (name, i) {\n          return {\n            key: (i + 1).toString(),\n            name: name\n          };\n        }),\n        renderItem: function renderItem(data) {\n          return _this5._renderPerformer(data.item);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        }\n      }), React.createElement(PerformerButton, {\n        onSave: function onSave(performerName) {\n          var performers = _this5.state.performers;\n          performers.push(performerName);\n\n          _this5.setState({\n            performers: performers\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }), React.createElement(Text, {\n        style: Styles.inputTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        }\n      }, \"Bio\"), React.createElement(View, {\n        style: Styles.inputRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        }\n      }, React.createElement(TextInput, {\n        style: Styles.bioBox,\n        multiline: true,\n        value: this.state.bio,\n        onChangeText: function onChangeText(value) {\n          return _this5.setState({\n            bio: value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }))))), React.createElement(View, {\n        style: Styles.buttonContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        }\n      }, React.createElement(Button, {\n        title: this.isNew ? \"Create Client\" : \"Save Client\",\n        onPress: function onPress() {\n          if (_this5._validateData()) {\n            var client = _this5.props.client || new Client();\n            client.update(_this5.state);\n\n            _this5.props.navigation.goBack();\n\n            _this5.props.onSave(client);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        }\n      }), this.isNew ? null : React.createElement(Button, {\n        title: \"Delete Client\",\n        color: \"red\",\n        onPress: function onPress() {\n          Alert.alert(\"Confirmation\", \"Are you sure you want to delete this client?\", [{\n            text: \"Cancel\"\n          }, {\n            text: \"OK\",\n            onPress: function onPress() {\n              _this5.props.navigation.goBack();\n\n              _this5.props.onDelete(_this5.props.client);\n            }\n          }], {\n            cancelable: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        }\n      })));\n    }\n  }]);\n\n  return ClientView;\n}(React.Component), _class4.propTypes = {\n  client: PropTypes.instanceOf(Client),\n  onSave: PropTypes.func.isRequired,\n  onDelete: PropTypes.func\n}, _temp2)) || _class3);\n\nvar PerformerEntry = function (_React$Component3) {\n  _inherits(PerformerEntry, _React$Component3);\n\n  function PerformerEntry(props) {\n    var _this6;\n\n    _classCallCheck(this, PerformerEntry);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(PerformerEntry).call(this, props));\n    _this6.state = {\n      name: _this6.props.name,\n      isEditing: !_this6.props.name\n    };\n    return _this6;\n  }\n\n  _createClass(PerformerEntry, [{\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      if (this.state.isEditing) {\n        return React.createElement(View, {\n          style: ClientStyles.entryContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          }\n        }, React.createElement(TextInput, {\n          style: ClientStyles.performerInput,\n          value: this.state.name,\n          onChangeText: function onChangeText(value) {\n            _this7.setState({\n              name: value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          }\n        }), React.createElement(View, {\n          style: ClientStyles.entryButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          }\n        }, React.createElement(Button, {\n          title: \"\\u2714\\uFE0F\",\n          color: \"#fff\",\n          onPress: function onPress() {\n            _this7.setState({\n              isEditing: false\n            });\n\n            var name = _this7.state.name;\n\n            if (name.trim() === \"\") {\n              _this7.props.onDelete();\n            } else {\n              _this7.props.onSave(_this7.state.name);\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          }\n        })), React.createElement(View, {\n          style: ClientStyles.entryButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300\n          }\n        }, React.createElement(Button, {\n          title: \"\\u274C\",\n          color: \"#fff\",\n          onPress: function onPress() {\n            _this7.props.onDelete();\n\n            _this7.setState({\n              isEditing: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          }\n        })));\n      } else {\n        return React.createElement(View, {\n          style: ClientStyles.entryContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          }\n        }, React.createElement(Text, {\n          style: [ClientStyles.entryName, ClientStyles.performerName],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          }\n        }, this.props.name), React.createElement(View, {\n          style: ClientStyles.entryButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          }\n        }, React.createElement(Button, {\n          title: \"\\u270F\\uFE0F\",\n          color: \"#fff\",\n          onPress: function onPress() {\n            _this7.setState({\n              isEditing: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          }\n        })), React.createElement(View, {\n          style: ClientStyles.entryButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          }\n        }, React.createElement(Button, {\n          title: \"\\u274C\",\n          color: \"#fff\",\n          onPress: this.props.onDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          }\n        })));\n      }\n    }\n  }]);\n\n  return PerformerEntry;\n}(React.Component);\n\nPerformerEntry.propTypes = {\n  name: PropTypes.string,\n  onSave: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired\n};\nPerformerEntry.defaultProps = {\n  name: \"\"\n};\nexport var PerformerButton = function (_React$Component4) {\n  _inherits(PerformerButton, _React$Component4);\n\n  function PerformerButton(props) {\n    var _this8;\n\n    _classCallCheck(this, PerformerButton);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(PerformerButton).call(this, props));\n    _this8.state = {\n      isOpen: false\n    };\n    return _this8;\n  }\n\n  _createClass(PerformerButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      if (this.state.isOpen) {\n        return React.createElement(PerformerEntry, {\n          onSave: function onSave(name) {\n            _this9.props.onSave(name);\n\n            _this9.setState({\n              isOpen: false\n            });\n          },\n          onDelete: function onDelete() {\n            return _this9.setState({\n              isOpen: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          }\n        });\n      } else {\n        return React.createElement(TouchableOpacity, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363\n          }\n        }, React.createElement(Button, {\n          title: \"\\u2795\",\n          onPress: function onPress() {\n            return _this9.setState({\n              isOpen: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364\n          }\n        }));\n      }\n    }\n  }]);\n\n  return PerformerButton;\n}(React.Component);\nPerformerButton.propTypes = {\n  onSave: PropTypes.func.isRequired\n};\nexport var ClientStyles = StyleSheet.create({\n  entryContainer: {\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    padding: 7,\n    margin: 3,\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: \"#ccc\",\n    alignItems: \"center\"\n  },\n  entryName: {\n    flexGrow: 3,\n    flexBasis: 0,\n    fontSize: 15\n  },\n  performerName: {\n    flexGrow: 5\n  },\n  performerInput: {\n    flexGrow: 6,\n    flexBasis: 0,\n    backgroundColor: \"#fff\",\n    marginRight: 10,\n    paddingLeft: 5\n  },\n  entryButton: {\n    flexGrow: 1,\n    flexBasis: 0,\n    flexShrink: 0,\n    marginRight: 5\n  },\n  performerTitle: {\n    fontSize: 20,\n    marginBottom: 5\n  },\n  promptText: {\n    fontSize: 15,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  scrollView: {\n    flexGrow: 1,\n    width: \"100%\"\n  }\n});","map":{"version":3,"sources":["/Users/dennis/Desktop/music-matters-bookings-system-working/views/ClientViews.js"],"names":["React","PropTypes","Client","Database","withMappedNavigationProps","AppContainer","Styles","styles","_","Constants","ManageClients","props","client","ClientStyles","entryContainer","entryName","stageName","entryButton","navigation","navigate","onSave","database","updateClient","catch","err","console","log","forceUpdate","onDelete","removeClient","infoView","contentContainer","listContainer","clients","map","key","id","data","_renderClient","item","buttonContainer","addClient","Component","propTypes","onReturn","func","instanceOf","isRequired","ClientView","isNew","state","email","performers","splitCheck","bio","performerData","name","index","parseInt","newName","setState","splice","emailRegex","RegExp","alert","length","test","scrollView","container","infoTitle","inputRow","inputTitle","inputBox","value","performerTitle","i","toString","_renderPerformer","performerName","push","bioBox","_validateData","update","goBack","Alert","text","onPress","cancelable","PerformerEntry","isEditing","performerInput","trim","string","defaultProps","PerformerButton","isOpen","StyleSheet","create","backgroundColor","display","flexDirection","padding","margin","borderWidth","borderRadius","borderColor","alignItems","flexGrow","flexBasis","fontSize","marginRight","paddingLeft","flexShrink","marginBottom","promptText","marginTop","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Alert, Button, FlatList, StyleSheet, Switch, Text, TextInput, View, TouchableOpacity} from 'react-native';\r\nimport {KeyboardAvoidingView} from 'react-native';\r\nimport {Client} from '../objects';\r\nimport Database from \"../Database\";\r\nimport {withMappedNavigationProps} from \"react-navigation-props-mapper\";\r\nimport AppContainer from \"../components/AppContainer\";\r\nimport Styles from \"../styles\";\r\nimport styles from \"../styles\";\r\nimport _ from \"lodash\";\r\nimport { SafeAreaView, ScrollView } from 'react-native';\r\nimport Constants from 'expo-constants';\r\n\r\n@withMappedNavigationProps()\r\nexport class ManageClients extends React.Component {\r\n    static propTypes = {\r\n        onReturn: PropTypes.func,\r\n        database: PropTypes.instanceOf(Database).isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    _renderClient(client) {\r\n        return(\r\n            <View style={ClientStyles.entryContainer}>\r\n                <Text style={ClientStyles.entryName}>{client.stageName}</Text>\r\n                <View style={ClientStyles.entryButton}>\r\n                    <Button\r\n                        title = \"⚙️🔧\"\r\n                        onPress = {() => this.props.navigation.navigate(\"Client\", {\r\n                            client: client,\r\n                            onSave: client => {\r\n                                this.props.database.updateClient(client).catch(err => console.log(err));\r\n                                this.forceUpdate();\r\n                            },\r\n                            onDelete: client => {\r\n                                this.props.database.removeClient(client).catch(err => console.log(err));\r\n                                this.forceUpdate();\r\n                            }\r\n                        })}\r\n                    />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContainer style={Styles.infoView}>\r\n                <View style={Styles.contentContainer}>\r\n                    <FlatList style={Styles.listContainer}\r\n                        data={this.props.database.clients.map(client => { return {\r\n                            key: client.id,\r\n                            data: client\r\n                        }})}\r\n                        renderItem = {data => this._renderClient(data.item.data)}\r\n                    />\r\n                </View>\r\n\r\n                <View style={Styles.buttonContainer}>\r\n                    <Button\r\n                        title = \"Add New Client\"\r\n                        onPress = {() => this.props.navigation.navigate(\"Client\", {\r\n                            onSave: client => {\r\n                                this.props.database.addClient(client);\r\n                                this.forceUpdate();\r\n                            }\r\n                        })}\r\n                    />\r\n                </View>\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\n@withMappedNavigationProps()\r\nexport class ClientView extends React.Component {\r\n    static propTypes = {\r\n        client: PropTypes.instanceOf(Client),\r\n        onSave: PropTypes.func.isRequired,\r\n        onDelete: PropTypes.func\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let client = this.props.client || new Client();\r\n        this.isNew = !client.id;\r\n\r\n        this.state = {\r\n            stageName: client.stageName || \"\",\r\n            email: client.email || \"\",\r\n            performers: client.performers || [],\r\n            splitCheck: client.splitCheck || false,\r\n            bio: client.bio || \"\"\r\n        };\r\n    }\r\n\r\n    _renderPerformer(performerData) {\r\n        let name = performerData.name;\r\n        let index = parseInt(performerData.key) - 1;\r\n\r\n        return (\r\n            <PerformerEntry\r\n                name = {name}\r\n                onSave = {newName => {\r\n                    let performers = this.state.performers;\r\n                    performers[index] = newName;\r\n                    this.setState({performers: performers});\r\n                }}\r\n                onDelete = {() => {\r\n                    let performers = this.state.performers;\r\n                    performers.splice(index, 1);\r\n                    this.setState({performers: performers});\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    _validateData() {\r\n        let emailRegex = new RegExp(`^[\\\\w\\.]+@(\\\\w{2,}\\.)+\\\\w+$`);\r\n\r\n        if (this.state.stageName === \"\") {\r\n            alert(\"The client must have a stage name.\")\r\n        } else if (this.state.performers.length === 0) {\r\n            alert(\"There must be at least one performer.\")\r\n        } else if (this.state.email === \"\") {\r\n            alert(\"The client must have an email address.\");\r\n        } else if (!emailRegex.test(this.state.email)) {\r\n            alert(\"The given email address was not in the proper format.\")\r\n        } else {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContainer style={Styles.infoView}>\r\n                <View style={Styles.contentContainer}>\r\n                <ScrollView style={ClientStyles.scrollView}>\r\n                <KeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled>\r\n                    <Text style={Styles.infoTitle}>\r\n                        {this.isNew ? \"Create New Client\" : \"Update Client\"}\r\n                    </Text>\r\n\r\n                    {/* Client Name Input */}\r\n                    <View style={Styles.inputRow}>\r\n                        <Text style={Styles.inputTitle}>Name</Text>\r\n                        <TextInput style={Styles.inputBox}\r\n                                value = {this.state.stageName}\r\n                                onChangeText = {value => this.setState({stageName: value})}\r\n                        />\r\n                    </View>\r\n\r\n                    {/* Contact Email Input */}\r\n                    <View style={Styles.inputRow}>\r\n                        <Text style={Styles.inputTitle}>Email</Text>\r\n                        <TextInput style={Styles.inputBox}\r\n                               value = {this.state.email}\r\n                               onChangeText = {value => this.setState({email: value})}\r\n                        />\r\n                    </View>\r\n\r\n                    {/* Performer Names Input */}\r\n                    <Text style={ClientStyles.performerTitle}>Performers</Text>\r\n                    <FlatList style={Styles.listContainer}\r\n                        data = {this.state.performers.map((name, i) => {\r\n                            return {\r\n                                key: (i + 1).toString(),\r\n                                name: name\r\n                            };\r\n                        })}\r\n                        renderItem = {data => this._renderPerformer(data.item)}\r\n                    />\r\n                    <PerformerButton\r\n                        onSave = {performerName => {\r\n                            let performers = this.state.performers;\r\n                            performers.push(performerName);\r\n                            this.setState({performers: performers});\r\n                        }}\r\n                    />\r\n\r\n                    {/* Option for splitting checks among performers\r\n                    <Text style={ClientStyles.promptText}>Separate Checks For Each Performer?</Text>\r\n                    <Switch\r\n                        value = {this.state.splitCheck}\r\n                        onValueChange = {(value) => {\r\n                            this.setState({splitCheck: value});\r\n                        }}\r\n                    /> */}\r\n\r\n                    {/* Bio Input */}\r\n                    <Text style={Styles.inputTitle}>Bio</Text>\r\n                    <View style={Styles.inputRow}>\r\n                        <TextInput style={Styles.bioBox}\r\n                                    multiline={true}\r\n                                    value = {this.state.bio}\r\n                                    onChangeText = {value => this.setState({bio: value})}\r\n                        />\r\n                    </View>\r\n                </KeyboardAvoidingView>\r\n                </ScrollView>\r\n                </View>\r\n\r\n                <View style={Styles.buttonContainer}>\r\n                    {/* Save Button */}\r\n                    <Button\r\n                        title = {this.isNew ? \"Create Client\" : \"Save Client\"}\r\n                        onPress = {() => {\r\n                            if (this._validateData()) {\r\n                                let client = this.props.client || new Client();\r\n                                client.update(this.state);\r\n\r\n                                this.props.navigation.goBack();\r\n                                this.props.onSave(client);\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    {/* Delete Button */}\r\n                    { this.isNew ? null :\r\n                        <Button\r\n                            title = \"Delete Client\"\r\n                            color = \"red\"\r\n                            onPress = {() => {\r\n                                Alert.alert(\"Confirmation\",\r\n                                    \"Are you sure you want to delete this client?\",\r\n                                    [\r\n                                        {\r\n                                            text: \"Cancel\"\r\n                                        },\r\n                                        {\r\n                                            text: \"OK\",\r\n                                            onPress: () => {\r\n                                                this.props.navigation.goBack();\r\n                                                this.props.onDelete(this.props.client);\r\n                                            }\r\n                                        }\r\n                                    ],\r\n                                    {cancelable: true}\r\n                                );\r\n                            }}\r\n                        />\r\n                    }\r\n                </View>\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nclass PerformerEntry extends React.Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        onSave: PropTypes.func.isRequired,\r\n        onDelete: PropTypes.func.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        name: \"\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            isEditing: !this.props.name\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isEditing) {\r\n            return (\r\n                <View style={ClientStyles.entryContainer}>\r\n                    <TextInput style={ClientStyles.performerInput}\r\n                        value = {this.state.name}\r\n                        onChangeText = {value => {\r\n                            this.setState({name: value});\r\n                        }}\r\n                    />\r\n                    <View style={ClientStyles.entryButton}>\r\n                        <Button\r\n                            title = \"✔️\"\r\n                            color = \"#fff\"\r\n                            onPress = {() => {\r\n                                this.setState({isEditing: false});\r\n\r\n                                let name = this.state.name;\r\n                                if (name.trim() === \"\") {\r\n                                    this.props.onDelete();\r\n                                } else {\r\n                                    this.props.onSave(this.state.name);\r\n                                }\r\n                            }}\r\n                        />\r\n                    </View> \r\n                        <View style={ClientStyles.entryButton}>\r\n                            <Button\r\n                                title = \"❌\"\r\n                                color = \"#fff\"\r\n                                onPress = {() => {\r\n                                    this.props.onDelete();\r\n                                    this.setState({isEditing: false})\r\n                                }}\r\n                            />\r\n                        </View> \r\n                </View>\r\n            );\r\n        } else {\r\n            return (\r\n                <View style={ClientStyles.entryContainer}>\r\n                    <Text style={[ClientStyles.entryName, ClientStyles.performerName]}>{this.props.name}</Text>\r\n                    <View style={ClientStyles.entryButton}>\r\n                        <Button\r\n                            title = \"✏️\"\r\n                            color = \"#fff\"\r\n                            onPress = {() => {\r\n                                this.setState({isEditing: true});\r\n                            }}\r\n                        />\r\n                    </View>\r\n                    <View style={ClientStyles.entryButton}>\r\n                        <Button\r\n                            title = \"❌\"\r\n                            color = \"#fff\"\r\n                            onPress = {this.props.onDelete}\r\n                        />\r\n                    </View>\r\n                </View>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class PerformerButton extends React.Component {\r\n    static propTypes = {\r\n        onSave: PropTypes.func.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isOpen) {\r\n            return (\r\n                <PerformerEntry\r\n                    onSave = { name => {\r\n                        this.props.onSave(name);\r\n                        this.setState({isOpen: false});\r\n                    }}\r\n                    onDelete = {() => this.setState({isOpen: false})}\r\n                />\r\n            );\r\n        } else {\r\n            return (\r\n                <TouchableOpacity>\r\n                    <Button\r\n                        title=\"➕\"\r\n                        onPress = {() => this.setState({isOpen: true})}\r\n                    />\r\n                </TouchableOpacity>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport const ClientStyles = StyleSheet.create({\r\n    entryContainer: {\r\n        backgroundColor: \"#fff\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        padding: 7,\r\n        margin: 3,\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        borderColor: \"#ccc\",\r\n        alignItems: \"center\"\r\n    },\r\n    entryName: {\r\n        flexGrow: 3,\r\n        flexBasis: 0,\r\n        fontSize: 15\r\n    },\r\n    performerName: {\r\n        flexGrow: 5\r\n    },\r\n    performerInput: {\r\n        flexGrow: 6,\r\n        flexBasis: 0,\r\n        backgroundColor: \"#fff\",\r\n        marginRight: 10,\r\n        paddingLeft: 5\r\n    },\r\n    entryButton: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        flexShrink: 0,\r\n        marginRight: 5\r\n    },\r\n    performerTitle: {\r\n        fontSize: 20,\r\n        marginBottom: 5\r\n    },\r\n    promptText: {\r\n        fontSize: 15,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    },\r\n    scrollView: {\r\n        flexGrow: 1,\r\n        width: \"100%\"\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}